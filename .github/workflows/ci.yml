name: CI
permissions:
  contents: read

on:
  push:
    branches: [ "main" ]
    paths-ignore:
      - 'docs/**'
      - '*.md'
      - 'wiki-content/**'
  pull_request:
    branches: [ "main" ]
    paths-ignore:
      - 'docs/**'
      - '*.md'
      - 'wiki-content/**'

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  test:
    name: Go ${{ matrix.go-version }} • ${{ matrix.target }} • race=${{ matrix.race }}
    runs-on: ubuntu-latest
    timeout-minutes: 15
    strategy:
      fail-fast: false
      matrix:
        go-version: [ '1.23.x' ]
        target: [ unit, ws ]
        race: [ false, true ]
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ matrix.go-version }}
          cache: false

      - name: Resolve Go cache paths
        id: cache-paths
        shell: bash
        run: |
          echo "GOCACHE=$(go env GOCACHE)" >> "$GITHUB_ENV"
          echo "GOMODCACHE=$(go env GOMODCACHE)" >> "$GITHUB_ENV"

      - name: Cache modules (GOMODCACHE)
        uses: actions/cache@v4
        with:
          path: ${{ env.GOMODCACHE }}
          key: ${{ runner.os }}-gomod-${{ matrix.go-version }}-${{ hashFiles('backend/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-gomod-${{ matrix.go-version }}-

      - name: Cache build artifacts (GOCACHE)
        uses: actions/cache@v4
        with:
          path: ${{ env.GOCACHE }}
          key: ${{ runner.os }}-gobuild-${{ matrix.go-version }}-${{ hashFiles('backend/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-gobuild-${{ matrix.go-version }}-

      - name: Go env
        run: |
          go version
          go env GOCACHE GOMODCACHE

      - name: Format check (gofmt) and Vet
        if: matrix.target == 'unit'
        working-directory: backend
        run: |
          # Check formatting without mutating files - fails if any files need formatting
          UNFORMATTED=$(gofmt -s -l .)
          if [ -n "$UNFORMATTED" ]; then
            echo "Unformatted files:" && echo "$UNFORMATTED"
            exit 1
          fi
          # Run vet
          go vet ./...

      - name: Tests (unit)
        if: matrix.target == 'unit' && matrix.race == false
        run: make test

      - name: Tests (unit, race)
        if: matrix.target == 'unit' && matrix.race == true
        run: make test-race

      - name: Tests (ws)
        if: matrix.target == 'ws' && matrix.race == false
        run: make test-ws

      - name: Tests (ws, race)
        if: matrix.target == 'ws' && matrix.race == true
        run: make test-ws-race

  actionlint:
    name: Lint GitHub Actions workflows
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: actionlint
        uses: rhysd/actionlint@v1.7.0

  validate-automation:
    name: Validate project automation setup
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Run validation script
        run: bash scripts/validate-automation.sh