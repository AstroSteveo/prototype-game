[2025-09-12T18:26:43] Code v0.2.128
--------
workdir: /home/astrosteveo/Repos/prototype-game
model: gpt-5
provider: openai
approval: never
sandbox: read-only
reasoning effort: high
reasoning summaries: auto
--------
[2025-09-12T18:26:43] User instructions:
Context: Planning pass only. Do not modify files. Respect AGENTS.md as authoritative for agents. 

Agent: You are one of three planning agents. Produce a comprehensive, high‑leverage implementation plan for this repo to reach the next milestones (M3→M5 + Non‑Functional), aligned with AGENTS.md. Focus on Go backend (gateway + sim), WebSocket transport, AOI, handovers, bots, persistence, observability, and security. Include rationale, risks, and concrete test plans. Keep changes minimal and focused; follow Go 1.21 conventions and Makefile flows.

Repository quick brief (read the codebase as needed):
- Language: Go 1.21.
- Build tags: WebSocket code under `//go:build ws`.
- Preferred commands: `make run|stop|login|wsprobe|test|test-ws|build`.

Root layout (key paths):
- `backend/` — Go services and libs
  - `cmd/gateway` — HTTP gateway: `/login`, `/validate`, `/healthz`
  - `cmd/sim` — Simulation service: `/healthz`, `/config`, `/dev/*`, `/ws` (behind `-tags ws`)
  - `cmd/wsprobe` — CLI to drive the WS endpoint (join, input)
  - `internal/join` — Transport‑agnostic join/auth flow (`HandleJoin`, `AuthService`)
  - `internal/sim` — Engine (tick loop, AOI, handovers, types)
  - `internal/spatial` — Spatial math + cell helpers
  - `internal/transport/ws` — WebSocket transport (stub + real under `-tags ws`)
- `docs/design/TDD.md` — Architecture, phases, acceptance criteria
- `docs/process/BACKLOG.md` — Stories and status (M1–M5 + stretch)
- `docs/dev/DEV.md` — Dev workflows and endpoints
- `Makefile` — Common targets (fmt, vet, test, test‑ws, run, build)

Current status (from code and docs):
- MVP (M0–M2) largely done: login/validate; WS join; input→state; AOI by radius; telemetry; snapshot cadence. Engine has hysteresis handover logic and AOI queries.
- M3 in progress (handover w/ hysteresis) with tests; contiguous AOI across borders (US‑302) not started.
- M4 planned (bots/density); M5 planned (persistence + reconnect). Non‑functional observability and baseline security planned.

What to deliver (your plan should include):
1) A phase‑sequenced plan (2–4 weeks horizon) to complete M3, M4, M5, and Non‑Functional stories. Group tasks by milestone and package (e.g., `internal/sim`, `internal/transport/ws`, `cmd/sim`, `cmd/gateway`).
2) For each task: intent, concrete changes (files/modules), acceptance criteria, and tests (unit and/or WS integration). Note build tags where needed.
3) A lean migration strategy for any protocol or schema changes (JSON fields, message shapes).
4) An observability checklist and minimal metrics to add (tick time, snapshot size, WS connections, handover latency).
5) Security notes: auth/token validation, velocity clamps, timeouts, and heartbeat.
6) Risk register and mitigations; roll‑back or feature flags where sensible.
7) Execution timeline with parallelizable streams (e.g., bots vs. persistence), estimated effort, and CI gates (`make fmt vet test` + `make test-ws`).

Constraints and repository rules (must follow):
- Prefer Makefile targets to raw commands to avoid drift.
- Guard WS‑only code and tests with `//go:build ws`; use `make test-ws`.
- Keep PRs < ~300 LOC where practical; always add/update tests; update docs (`docs/process/*`, `docs/dev/DEV.md`) when behavior changes.
- Style: `gofmt`, short package names, export only as needed.

Success state: A final plan document (outline + steps) that a single developer could begin implementing immediately, with checkpoints tied to `make` targets and GREEN tests locally and in CI.

Please read the code; you may use only the two attached files for quick reference and then navigate the repo to inspect anything else needed. Produce your own structured plan with clear steps, acceptance criteria, and test coverage. 

Desired output: A clear, phased implementation plan with tasks, acceptance criteria, tests, metrics, and timeline. Keep it concrete and repo-aware.

Files to consider: AGENTS.md, Makefile

[Running in read-only mode - no modifications allowed]

[2025-09-12T18:26:56] thinking

**Creating a final plan**

I need to develop a phase-sequenced plan for 2 to 4 weeks. For each task, I’ll clarify the intent, outline concrete changes, acceptance criteria, and tests. I should include a migration strategy for protocol changes, observability metrics, security measures, risks, and an execution timeline with parallelization and CI gates. Ensuring that changes are minimal and adhere to our established style is also essential. I’ll begin by reading AGENTS.md and the Makefile.
[2025-09-12T18:26:59] codex

Scanning AGENTS.md and Makefile for constraints, then mapping code layout and current status to craft the phased plan.
[2025-09-12T18:27:00] exec bash -lc 'ls -la' in /home/astrosteveo/Repos/prototype-game
[2025-09-12T18:27:00] bash -lc 'ls -la' succeeded in 13ms:
total 16
drwxr-xr-x 1 astrosteveo astrosteveo  128 Sep 11 22:11 .
drwxr-xr-x 1 astrosteveo astrosteveo  108 Sep 10 23:36 ..
-rw-r--r-- 1 astrosteveo astrosteveo 3961 Sep 12 12:41 AGENTS.md
drwxr-xr-x 1 astrosteveo astrosteveo   52 Sep 11 21:15 backend
drwxr-xr-x 1 astrosteveo astrosteveo   18 Sep 11 00:42 client
drwxr-xr-x 1 astrosteveo astrosteveo   32 Sep 12 12:48 docs
drwxr-xr-x 1 astrosteveo astrosteveo  150 Sep 12 13:26 .git
drwxr-xr-x 1 astrosteveo astrosteveo  116 Sep 12 12:36 .github
-rw-r--r-- 1 astrosteveo astrosteveo   71 Sep 11 22:02 .gitignore
-rw-r--r-- 1 astrosteveo astrosteveo 3257 Sep 11 21:13 Makefile
-rw-r--r-- 1 astrosteveo astrosteveo 1449 Sep 12 12:41 README.md
[2025-09-12T18:27:00] tokens used: 9925
[2025-09-12T18:27:06] exec bash -lc "sed -n '1,200p' AGENTS.md" in /home/astrosteveo/Repos/prototype-game
[2025-09-12T18:27:06] bash -lc "sed -n '1,200p' AGENTS.md" succeeded in 13ms:
# Repository Guidelines

## Instruction Scope
- AGENTS.md is the authoritative instruction set for agents and automation.
- Documents under `docs/` are human-facing references and do not override AGENTS.md.
- Per-subtree AGENTS.md files may exist and take precedence within their subtree.

## Project Structure & Module Organization
- **Root:** High‑level docs in `docs/` organized as:
  - `docs/design/` (GDD, TDD)
  - `docs/process/` (BACKLOG, PROGRESS)
  - `docs/dev/` (DEV guide)
- **Backend (Go):** `backend/` with service entries under `backend/cmd/` (`gateway`, `sim`) and libraries in `backend/internal/` (`sim`, `spatial`, `join`, `transport/ws`).
- **Client:** `client/` (placeholder for the game client; see `client/README.md`).

## Build, Test, and Development Commands
- **Makefile:** run `make help` for common targets (`run`, `stop`, `login`, `wsprobe`, `test`, `test-ws`, `build`). Prefer Makefile targets over raw commands to avoid drift.
- **Dev guide:** see `docs/dev/DEV.md` for day-to-day workflows and tips.
- **Run gateway:** `cd backend && go run ./cmd/gateway -port 8080 -sim localhost:8081`
- **Run sim (HTTP + stub WS):** `cd backend && go run ./cmd/sim -port 8081`
[2025-09-12T18:27:06] tokens used: 491
[2025-09-12T18:27:13] exec bash -lc "sed -n '1,240p' Makefile" in /home/astrosteveo/Repos/prototype-game
[2025-09-12T18:27:13] bash -lc "sed -n '1,240p' Makefile" succeeded in 13ms:
SHELL := /bin/bash

# Paths
BACKEND := backend
BIN := $(BACKEND)/bin
PIDDIR := $(BACKEND)/.pids
LOGDIR := $(BACKEND)/logs

# Ports
GATEWAY_PORT ?= 8080
SIM_PORT ?= 8081
GATEWAY_URL := http://localhost:$(GATEWAY_PORT)
SIM_URL := http://localhost:$(SIM_PORT)

.PHONY: help fmt vet test test-ws build run run-gateway run-sim wait-up stop login wsprobe e2e-join e2e-move clean

help:
	@echo "Common targets:"
	@echo "  make run         # start gateway and sim (WS) in background"
	@echo "  make stop        # stop both services"
[2025-09-12T18:27:13] tokens used: 1253

[2025-09-12T18:27:15] thinking

**Inspecting backend structure**

I need to take a closer look at the backend structure. It's important to ensure everything is functioning properly and that the setup is efficient. I wonder if there are any potential improvements I could identify while I'm at it. It might be useful to double-check for any dependencies or connections that need attention. I'll try to be thorough in my assessment to avoid any oversights later on. Let's dive into it!
[2025-09-12T18:27:18] exec bash -lc "ls -la backend && echo && find backend -maxdepth 3 -type d -printf \"%p\\n\" | sed -n '1,200p'" in /home/astrosteveo/Repos/prototype-game
[2025-09-12T18:27:18] bash -lc "ls -la backend && echo && find backend -maxdepth 3 -type d -printf \"%p\\n\" | sed -n '1,200p'" succeeded in 15ms:
total 8
drwxr-xr-x 1 astrosteveo astrosteveo  52 Sep 11 21:15 .
drwxr-xr-x 1 astrosteveo astrosteveo 128 Sep 11 22:11 ..
drwxr-xr-x 1 astrosteveo astrosteveo  20 Sep 11 21:16 bin
drwxr-xr-x 1 astrosteveo astrosteveo  34 Sep 11 18:59 cmd
-rw-r--r-- 1 astrosteveo astrosteveo  76 Sep 11 18:58 go.mod
-rw-r--r-- 1 astrosteveo astrosteveo 159 Sep 11 18:58 go.sum
drwxr-xr-x 1 astrosteveo astrosteveo  46 Sep 11 01:10 internal

backend
backend/cmd
backend/cmd/sim
backend/cmd/gateway
backend/cmd/wsprobe
backend/internal
backend/internal/spatial
backend/internal/sim
backend/internal/join
backend/internal/transport
backend/internal/transport/ws
[2025-09-12T18:27:18] tokens used: 1415
[2025-09-12T18:27:20] exec bash -lc "sed -n '1,200p' backend/cmd/gateway/main.go" in /home/astrosteveo/Repos/prototype-game
[2025-09-12T18:27:20] bash -lc "sed -n '1,200p' backend/cmd/gateway/main.go" succeeded in 13ms:
package main

import (
	"crypto/rand"
	"encoding/hex"
	"encoding/json"
	"flag"
	"log"
	"net/http"
	"sync"
	"time"
)

type session struct {
	PlayerID string    `json:"player_id"`
	Name     string    `json:"name"`
	Token    string    `json:"token"`
	LastSeen time.Time `json:"last_seen"`
}

[2025-09-12T18:27:20] tokens used: 466
[2025-09-12T18:27:23] exec bash -lc "sed -n '1,240p' backend/cmd/sim/main.go" in /home/astrosteveo/Repos/prototype-game
[2025-09-12T18:27:23] bash -lc "sed -n '1,240p' backend/cmd/sim/main.go" succeeded in 13ms:
package main

import (
	"context"
	"encoding/json"
	"flag"
	"fmt"
	"log"
	"net/http"
	"os"
	"os/signal"
	"syscall"
	"time"

	"prototype-game/backend/internal/join"
	"prototype-game/backend/internal/sim"
	"prototype-game/backend/internal/spatial"
	transportws "prototype-game/backend/internal/transport/ws"
)

[2025-09-12T18:27:23] tokens used: 1076
[2025-09-12T18:27:26] exec bash -lc "sed -n '1,260p' backend/cmd/wsprobe/main.go" in /home/astrosteveo/Repos/prototype-game
[2025-09-12T18:27:26] bash -lc "sed -n '1,260p' backend/cmd/wsprobe/main.go" succeeded in 14ms:
package main

import (
	"context"
	"encoding/json"
	"flag"
	"fmt"
	"log"
	"time"

	nws "nhooyr.io/websocket"
	"nhooyr.io/websocket/wsjson"
)

func main() {
	var (
		url   = flag.String("url", "ws://localhost:8081/ws", "websocket url")
		token = flag.String("token", "", "dev token from gateway /login")
		moveX = flag.Float64("move_x", 0, "movement intent x (-1..1)")
		moveZ = flag.Float64("move_z", 0, "movement intent z (-1..1)")
[2025-09-12T18:27:26] tokens used: 1593
[2025-09-12T18:27:30] exec bash -lc "sed -n '1,260p' backend/internal/join/join.go" in /home/astrosteveo/Repos/prototype-game
[2025-09-12T18:27:30] bash -lc "sed -n '1,260p' backend/internal/join/join.go" succeeded in 13ms:
package join

import (
	"context"
	"errors"

	"prototype-game/backend/internal/sim"
	"prototype-game/backend/internal/spatial"
)

// AuthService validates a client token and returns player identity.
type AuthService interface {
	Validate(ctx context.Context, token string) (playerID, name string, ok bool)
}

// Hello represents the minimal client hello payload.
type Hello struct {
	Token string `json:"token"`
}

[2025-09-12T18:27:30] tokens used: 724
[2025-09-12T18:27:33] exec bash -lc "sed -n '1,260p' backend/internal/sim/engine.go" in /home/astrosteveo/Repos/prototype-game
[2025-09-12T18:27:33] bash -lc "sed -n '1,260p' backend/internal/sim/engine.go" succeeded in 14ms:
package sim

import (
	"context"
	"log"
	"sync"
	"time"

	"prototype-game/backend/internal/spatial"
)

type Engine struct {
	cfg       Config
	mu        sync.RWMutex
	cells     map[spatial.CellKey]*CellInstance
	players   map[string]*Player // id -> player
	stopCh    chan struct{}
	stoppedCh chan struct{}
}

[2025-09-12T18:27:33] tokens used: 817
[2025-09-12T18:27:35] exec bash -lc "sed -n '1,260p' backend/internal/sim/config.go" in /home/astrosteveo/Repos/prototype-game
[2025-09-12T18:27:35] bash -lc "sed -n '1,260p' backend/internal/sim/config.go" exited 2 in 13ms:
ERROR
sed: can't read backend/internal/sim/config.go: No such file or directory
[2025-09-12T18:27:36] tokens used: 1988
[2025-09-12T18:27:39] exec bash -lc "ls -la backend/internal/sim && echo && sed -n '1,260p' backend/internal/sim/types.go && echo && sed -n '1,260p' backend/internal/sim/handover.go && echo && rg -n \"package sim\" backend/internal/sim -n" in /home/astrosteveo/Repos/prototype-game
[2025-09-12T18:27:39] bash -lc "ls -la backend/internal/sim && echo && sed -n '1,260p' backend/internal/sim/types.go && echo && sed -n '1,260p' backend/internal/sim/handover.go && echo && rg -n \"package sim\" backend/internal/sim -n" exited 2 in 15ms:
total 36
drwxr-xr-x 1 astrosteveo astrosteveo  170 Sep 11 21:50 .
drwxr-xr-x 1 astrosteveo astrosteveo   46 Sep 11 01:10 ..
-rw-r--r-- 1 astrosteveo astrosteveo 2153 Sep 11 21:50 aoi_test.go
-rw-r--r-- 1 astrosteveo astrosteveo  780 Sep 11 20:59 bots.go
-rw-r--r-- 1 astrosteveo astrosteveo  281 Sep 11 20:59 cell.go
-rw-r--r-- 1 astrosteveo astrosteveo 5209 Sep 11 21:50 engine.go
-rw-r--r-- 1 astrosteveo astrosteveo 2487 Sep 11 20:59 engine_test.go
-rw-r--r-- 1 astrosteveo astrosteveo 1818 Sep 11 20:59 handovers.go
-rw-r--r-- 1 astrosteveo astrosteveo 1648 Sep 11 20:59 handovers_test.go
-rw-r--r-- 1 astrosteveo astrosteveo  538 Sep 11 20:59 types.go

package sim

import "prototype-game/backend/internal/spatial"

type EntityKind int

const (
	KindPlayer EntityKind = iota

ERROR
sed: can't read backend/internal/sim/handover.go: No such file or directory
[2025-09-12T18:27:39] tokens used: 193

[2025-09-12T18:27:43] thinking

**Exploring sim package files**

I see that the sim package has several important files: aoi_test.go, bots.go, cell.go, engine.go, engine_test.go, handovers.go, handovers_test.go, and types.go. To better understand the Area of Interest (AOI) and handovers, I need to open bots.go, cell.go, handovers.go, and their corresponding test files. This should give me a clearer picture of how these components interact with each other. Let's get started!
[2025-09-12T18:27:45] exec bash -lc "sed -n '1,260p' backend/internal/sim/handovers.go" in /home/astrosteveo/Repos/prototype-game
[2025-09-12T18:27:45] bash -lc "sed -n '1,260p' backend/internal/sim/handovers.go" succeeded in 14ms:
package sim

import (
	"prototype-game/backend/internal/spatial"
)

// checkAndHandoverLocked decides whether to move the player to a new cell based on hysteresis.
// e.mu must be held by caller.
func (e *Engine) checkAndHandoverLocked(p *Player) {
	// If player is already inside its owned cell (with hysteresis) do nothing.
	// We require the player to be at least H meters past the border into the new cell.
	cx, cz := spatial.WorldToCell(p.Pos.X, p.Pos.Z, e.cfg.CellSize)
	target := spatial.CellKey{Cx: cx, Cz: cz}
	if target == p.OwnedCell {
		return
	}
	// Verify past hysteresis threshold into target cell.
	if crossedBeyondHysteresis(p.Pos, p.OwnedCell, target, e.cfg.CellSize, e.cfg.HandoverHysteresisM) {
		old := p.OwnedCell
		e.moveEntityLocked(p, old, target)
[2025-09-12T18:27:45] tokens used: 747
[2025-09-12T18:27:47] exec bash -lc "sed -n '1,260p' backend/internal/sim/handovers_test.go" in /home/astrosteveo/Repos/prototype-game
[2025-09-12T18:27:47] bash -lc "sed -n '1,260p' backend/internal/sim/handovers_test.go" succeeded in 14ms:
package sim

import (
	"prototype-game/backend/internal/spatial"
	"testing"
)

func TestCrossedBeyondHysteresis(t *testing.T) {
	cell := 10.0
	H := 2.0
	from := spatial.CellKey{Cx: 0, Cz: 0}
	toE := spatial.CellKey{Cx: 1, Cz: 0}
	// crossing east: border at x=10; require x>=12
	if crossedBeyondHysteresis(spatial.Vec2{X: 11.9, Z: 0}, from, toE, cell, H) {
		t.Fatalf("should not handover before hysteresis")
	}
	if !crossedBeyondHysteresis(spatial.Vec2{X: 12.0, Z: 0}, from, toE, cell, H) {
		t.Fatalf("should handover after hysteresis")
	}

[2025-09-12T18:27:47] tokens used: 692
[2025-09-12T18:27:50] exec bash -lc "sed -n '1,240p' backend/internal/sim/aoi_test.go" in /home/astrosteveo/Repos/prototype-game
[2025-09-12T18:27:50] bash -lc "sed -n '1,240p' backend/internal/sim/aoi_test.go" succeeded in 14ms:
package sim

import (
	"testing"
	"time"

	"prototype-game/backend/internal/spatial"
)

func TestAOI_InclusiveBoundaryAndExclusion(t *testing.T) {
	e := NewEngine(Config{CellSize: 10, AOIRadius: 5, TickHz: 20, SnapshotHz: 10, HandoverHysteresisM: 2})
	// Anchor player at origin
	p := e.DevSpawn("p0", "Anchor", spatial.Vec2{X: 0, Z: 0})
	// Entity exactly at radius 5 (3,4) distance 5
	_ = e.AddOrUpdatePlayer("p1", "In", spatial.Vec2{X: 3, Z: 4}, spatial.Vec2{})
	// Entity just outside radius
	_ = e.AddOrUpdatePlayer("p2", "Out", spatial.Vec2{X: 5.1, Z: 0}, spatial.Vec2{})

	got := e.QueryAOI(p.Pos, e.cfg.AOIRadius, p.ID)
	has := func(id string) bool {
[2025-09-12T18:27:50] tokens used: 791
[2025-09-12T18:27:53] exec bash -lc "sed -n '1,260p' backend/internal/spatial/cell.go" in /home/astrosteveo/Repos/prototype-game
[2025-09-12T18:27:53] bash -lc "sed -n '1,260p' backend/internal/spatial/cell.go" exited 2 in 14ms:
ERROR
sed: can't read backend/internal/spatial/cell.go: No such file or directory
[2025-09-12T18:27:53] tokens used: 1066
[2025-09-12T18:27:59] exec bash -lc "ls -la backend/internal/spatial && echo && sed -n '1,260p' backend/internal/spatial/spatial.go" in /home/astrosteveo/Repos/prototype-game
[2025-09-12T18:27:59] bash -lc "ls -la backend/internal/spatial && echo && sed -n '1,260p' backend/internal/spatial/spatial.go" succeeded in 15ms:
total 8
drwxr-xr-x 1 astrosteveo astrosteveo   50 Sep 11 20:59 .
drwxr-xr-x 1 astrosteveo astrosteveo   46 Sep 11 01:10 ..
-rw-r--r-- 1 astrosteveo astrosteveo 1389 Sep 11 20:59 spatial.go
-rw-r--r-- 1 astrosteveo astrosteveo  826 Sep 11 20:59 spatial_test.go

package spatial

import "math"

type Vec2 struct {
	X float64
	Z float64
}

// CellKey uniquely identifies a grid cell.
type CellKey struct {
	Cx int
	Cz int
}
[2025-09-12T18:27:59] tokens used: 133
[2025-09-12T18:28:02] exec bash -lc "sed -n '1,260p' backend/internal/sim/cell.go" in /home/astrosteveo/Repos/prototype-game
[2025-09-12T18:28:03] bash -lc "sed -n '1,260p' backend/internal/sim/cell.go" succeeded in 13ms:
package sim

import (
	"prototype-game/backend/internal/spatial"
)

type CellInstance struct {
	Key      spatial.CellKey
	Entities map[string]*Entity
}

func NewCellInstance(key spatial.CellKey) *CellInstance {
	return &CellInstance{Key: key, Entities: make(map[string]*Entity)}
}
[2025-09-12T18:28:03] tokens used: 829
[2025-09-12T18:28:06] exec bash -lc "sed -n '1,260p' backend/internal/transport/ws/ws_stub.go" in /home/astrosteveo/Repos/prototype-game
[2025-09-12T18:28:06] bash -lc "sed -n '1,260p' backend/internal/transport/ws/ws_stub.go" exited 2 in 14ms:
ERROR
sed: can't read backend/internal/transport/ws/ws_stub.go: No such file or directory
[2025-09-12T18:28:06] tokens used: 22989
[2025-09-12T18:28:10] exec bash -lc "ls -la backend/internal/transport/ws && rg -n \"go:build\" backend/internal/transport/ws && echo && sed -n '1,260p' backend/internal/transport/ws/ws.go && echo && sed -n '1,260p' backend/internal/transport/ws/ws_ws.go" in /home/astrosteveo/Repos/prototype-game
[2025-09-12T18:28:10] bash -lc "ls -la backend/internal/transport/ws && rg -n \"go:build\" backend/internal/transport/ws && echo && sed -n '1,260p' backend/internal/transport/ws/ws.go && echo && sed -n '1,260p' backend/internal/transport/ws/ws_ws.go" exited 2 in 18ms:
total 24
drwxr-xr-x 1 astrosteveo astrosteveo  168 Sep 11 21:50 .
drwxr-xr-x 1 astrosteveo astrosteveo    4 Sep 11 01:10 ..
-rw-r--r-- 1 astrosteveo astrosteveo 2705 Sep 11 21:50 cadence_test.go
-rw-r--r-- 1 astrosteveo astrosteveo  537 Sep 11 20:59 register_stub.go
-rw-r--r-- 1 astrosteveo astrosteveo 4786 Sep 11 21:50 register_ws.go
-rw-r--r-- 1 astrosteveo astrosteveo 2309 Sep 11 21:45 telemetry_test.go
-rw-r--r-- 1 astrosteveo astrosteveo 3154 Sep 11 21:04 ws_integration_test.go
backend/internal/transport/ws/cadence_test.go:1://go:build ws
backend/internal/transport/ws/register_ws.go:1://go:build ws
backend/internal/transport/ws/telemetry_test.go:1://go:build ws
backend/internal/transport/ws/register_stub.go:1://go:build !ws
backend/internal/transport/ws/ws_integration_test.go:1://go:build ws


ERROR
sed: can't read backend/internal/transport/ws/ws.go: No such file or directory
[2025-09-12T18:28:10] tokens used: 204
[2025-09-12T18:28:12] exec bash -lc "sed -n '1,280p' backend/internal/transport/ws/register_stub.go" in /home/astrosteveo/Repos/prototype-game
[2025-09-12T18:28:12] bash -lc "sed -n '1,280p' backend/internal/transport/ws/register_stub.go" succeeded in 15ms:
//go:build !ws

package ws

import (
	"net/http"

	"prototype-game/backend/internal/join"
	"prototype-game/backend/internal/sim"
)

// Register installs a placeholder handler when the websocket build tag is not enabled.
// Build with `-tags ws` to enable the real websocket server.
func Register(mux *http.ServeMux, path string, auth join.AuthService, eng *sim.Engine) {
	mux.HandleFunc(path, func(w http.ResponseWriter, r *http.Request) {
		http.Error(w, "websocket transport not built (use -tags ws)", http.StatusNotImplemented)
	})
}
[2025-09-12T18:28:12] tokens used: 587
[2025-09-12T18:28:15] exec bash -lc "sed -n '1,300p' backend/internal/transport/ws/register_ws.go" in /home/astrosteveo/Repos/prototype-game
[2025-09-12T18:28:15] bash -lc "sed -n '1,300p' backend/internal/transport/ws/register_ws.go" succeeded in 14ms:
//go:build ws

package ws

import (
	"context"
	"encoding/json"
	"log"
	"net/http"
	"time"

	nws "nhooyr.io/websocket"
	"nhooyr.io/websocket/wsjson"

	"prototype-game/backend/internal/join"
	"prototype-game/backend/internal/sim"
	"prototype-game/backend/internal/spatial"
)

// Register installs the websocket handler when built with the `ws` tag.
[2025-09-12T18:28:15] tokens used: 292
[2025-09-12T18:28:22] exec bash -lc "sed -n '1,260p' backend/internal/transport/ws/cadence_test.go" in /home/astrosteveo/Repos/prototype-game
[2025-09-12T18:28:22] bash -lc "sed -n '1,260p' backend/internal/transport/ws/cadence_test.go" succeeded in 13ms:
//go:build ws

package ws

import (
	"context"
	"encoding/json"
	"net/http"
	"net/http/httptest"
	"strings"
	"testing"
	"time"

	nws "nhooyr.io/websocket"
	"nhooyr.io/websocket/wsjson"

	"prototype-game/backend/internal/sim"
)

type fakeAuthCad struct{}
[2025-09-12T18:28:22] tokens used: 2201
[2025-09-12T18:28:26] exec bash -lc "sed -n '1,260p' backend/internal/transport/ws/telemetry_test.go" in /home/astrosteveo/Repos/prototype-game
[2025-09-12T18:28:26] bash -lc "sed -n '1,260p' backend/internal/transport/ws/telemetry_test.go" succeeded in 13ms:
//go:build ws

package ws

import (
	"context"
	"encoding/json"
	"net/http"
	"net/http/httptest"
	"strings"
	"testing"
	"time"

	nws "nhooyr.io/websocket"
	"nhooyr.io/websocket/wsjson"

	"prototype-game/backend/internal/sim"
)

type fakeAuthT struct{}
[2025-09-12T18:28:26] tokens used: 1189
[2025-09-12T18:28:28] exec bash -lc "sed -n '1,320p' backend/internal/transport/ws/ws_integration_test.go" in /home/astrosteveo/Repos/prototype-game
[2025-09-12T18:28:28] bash -lc "sed -n '1,320p' backend/internal/transport/ws/ws_integration_test.go" succeeded in 13ms:
//go:build ws

package ws

import (
	"context"
	"encoding/json"
	"net/http"
	"net/http/httptest"
	"strings"
	"testing"
	"time"

	nws "nhooyr.io/websocket"
	"nhooyr.io/websocket/wsjson"

	"prototype-game/backend/internal/sim"
)

// fakeAuth implements the join.AuthService interface without importing join in tests.
[2025-09-12T18:28:28] tokens used: 1133
[2025-09-12T18:28:30] exec bash -lc "sed -n '1,220p' backend/internal/join/auth_http.go" in /home/astrosteveo/Repos/prototype-game
[2025-09-12T18:28:30] bash -lc "sed -n '1,220p' backend/internal/join/auth_http.go" succeeded in 14ms:
package join

import (
	"context"
	"encoding/json"
	"net/http"
	"net/url"
)

// HTTPAuth is an AuthService implementation that calls a gateway /validate endpoint.
type HTTPAuth struct {
	Client  *http.Client
	BaseURL string // e.g., http://localhost:8080
}

func NewHTTPAuth(base string) *HTTPAuth {
	return &HTTPAuth{Client: &http.Client{}, BaseURL: base}
}

func (h *HTTPAuth) Validate(ctx context.Context, token string) (string, string, bool) {
[2025-09-12T18:28:30] tokens used: 1399
[2025-09-12T18:28:34] exec bash -lc "sed -n '1,260p' backend/internal/sim/bots.go" in /home/astrosteveo/Repos/prototype-game
[2025-09-12T18:28:34] bash -lc "sed -n '1,260p' backend/internal/sim/bots.go" succeeded in 14ms:
package sim

import (
	"math"
	"math/rand"
	"time"

	"prototype-game/backend/internal/spatial"
)

// Placeholder bot logic for MVP skeleton. Does nothing yet but holds structure.

const botSpeed = 1.5 // m/s

type botState struct {
	dir        spatial.Vec2
	retargetAt time.Time
}

// maintainBotDensity no-op for now.
[2025-09-12T18:28:34] tokens used: 503
[2025-09-12T18:28:38] exec bash -lc "sed -n '1,260p' backend/internal/sim/engine_test.go" in /home/astrosteveo/Repos/prototype-game
[2025-09-12T18:28:38] bash -lc "sed -n '1,260p' backend/internal/sim/engine_test.go" succeeded in 13ms:
package sim

import (
	"testing"
	"time"

	"prototype-game/backend/internal/spatial"
)

func newTestEngine() *Engine {
	return NewEngine(Config{
		CellSize:            10,
		AOIRadius:           5,
		TickHz:              20,
		SnapshotHz:          10,
		HandoverHysteresisM: 2,
	})
}

func TestIntegratesVelocityStep(t *testing.T) {
[2025-09-12T18:28:38] tokens used: 465
[2025-09-12T18:28:45] exec bash -lc "ls -la docs && echo && find docs -maxdepth 2 -type f -print | sort && echo && sed -n '1,220p' docs/design/TDD.md && echo && sed -n '1,280p' docs/process/BACKLOG.md && echo && sed -n '1,200p' docs/dev/DEV.md" in /home/astrosteveo/Repos/prototype-game
[2025-09-12T18:28:45] bash -lc "ls -la docs && echo && find docs -maxdepth 2 -type f -print | sort && echo && sed -n '1,220p' docs/design/TDD.md && echo && sed -n '1,280p' docs/process/BACKLOG.md && echo && sed -n '1,200p' docs/dev/DEV.md" succeeded in 18ms:
total 0
drwxr-xr-x 1 astrosteveo astrosteveo  32 Sep 12 12:48 .
drwxr-xr-x 1 astrosteveo astrosteveo 128 Sep 11 22:11 ..
drwxr-xr-x 1 astrosteveo astrosteveo  24 Sep 12 12:46 design
drwxr-xr-x 1 astrosteveo astrosteveo  12 Sep 12 12:44 dev
drwxr-xr-x 1 astrosteveo astrosteveo  42 Sep 12 12:48 process

docs/design/GDD.md
docs/design/TDD.md
docs/dev/DEV.md
docs/process/BACKLOG.md
docs/process/PROGRESS.md

# Technical Design Document (TDD)

For day-to-day dev commands (run, build, tests), see `docs/dev/DEV.md`.

## Architectural Overview
- Gateway: handles auth, session lookup, and hands out connection details to the simulation service.
- Simulation service: server‑authoritative world tick, spatial partitioning (grid cells), interest management, and handovers.
[2025-09-12T18:28:46] tokens used: 1275

[2025-09-12T18:29:20] thinking

**Planning for protocol migration**

I'm working on creating test plans for each milestone using `make test` and `make test-ws`, making sure to use `-tags ws` for the WebSocket tests. The migration will introduce a new message type called "handover" event, while ensuring that existing clients remain unaffected. The idea is to keep changes minimal, maybe by adding a new envelope type or a "version" field in `join_ack` config. We should include acceptance criteria for M3 concerning the `handover` event and add integration tests to measure the correctness and latency of these events.
**Measuring handover latency**

I'm planning to compute "handover latency" as the duration from the threshold crossing to event emission. Since there's currently no event from the code, I'll instrument the engine to produce a channel or callback on handover. My approach aims for minimal changes: in the WebSocket writer loop, I can track the player's current `OwnedCell` every tick. If it changes, we send a 'handover' event. To update `OwnedCell`, I can use `ackPlayer` and set a local variable at join. In the writer loop, I'll check for differences and send the event if there's a change, logging the latency as well.
**Measuring bot density**

For non-critical situations, I can measure approximate time. I'll work on implementing `maintainBotDensity` in the engine loop during each tick. The tick currently has a TODO for updating bots and AI, so I'll integrate this call to ensure bots are updated. I'll set up a configuration for target density per cell and potentially a global cap. To keep things minimal, I can add new fields in `e.cfg` with zero defaults. We’ll also maintain a 'bot state' separately by using a map keyed by bot ID to hold their direction and retarget time, adjusting the update loop accordingly.
**Implementing persistence for M5**

I need to add an `internal/store` package that includes an interface and an in-memory store keyed by player ID. When the engine stops or a disconnect occurs, I'll call `store.SavePlayerPosition` to save the player's last known position. However, there's currently no connection object in place, so I'll need to implement WebSocket transport to trigger an "on close" event. This will help ensure player positions are preserved even when connections are lost.
**Proposing handover event structure**

I'm suggesting we create a 'handover' event structure shaped as a map with "type: handover" and "data" containing "from" and "to" coordinates. I'll also add tests for this. We should implement a WebSocket connections gauge and snapshot bytes metrics by tracking bytes for serialized messages with JSON length. 

I plan to integrate `expvar` for HTTP metrics through an existing sim server's HTTP endpoint at '/debug/vars'. We can keep this minimal while including feature flags for toggling bots and persistence in the configuration. Lastly, I'll outline a detailed proposal with sections and specific tasks for each milestone.
[2025-09-12T18:30:07] codex
**Measuring handover latency**

I'm planning to compute "handover latency" as the duration from the threshold crossing to event emission. Since there's currently no event from the code, I'll instrument the engine to produce a channel or callback on handover. My approach aims for minimal changes: in the WebSocket writer loop, I can track the player's current `OwnedCell` every tick. If it changes, we send a 'handover' event. To update `OwnedCell`, I can use `ackPlayer` and set a local variable at join. In the writer loop, I'll check for differences and send the event if there's a change, logging the latency as well.
[2025-09-12T18:30:07] codex
**Measuring bot density**

For non-critical situations, I can measure approximate time. I'll work on implementing `maintainBotDensity` in the engine loop during each tick. The tick currently has a TODO for updating bots and AI, so I'll integrate this call to ensure bots are updated. I'll set up a configuration for target density per cell and potentially a global cap. To keep things minimal, I can add new fields in `e.cfg` with zero defaults. We’ll also maintain a 'bot state' separately by using a map keyed by bot ID to hold their direction and retarget time, adjusting the update loop accordingly.
[2025-09-12T18:30:07] codex
**Implementing persistence for M5**

I need to add an `internal/store` package that includes an interface and an in-memory store keyed by player ID. When the engine stops or a disconnect occurs, I'll call `store.SavePlayerPosition` to save the player's last known position. However, there's currently no connection object in place, so I'll need to implement WebSocket transport to trigger an "on close" event. This will help ensure player positions are preserved even when connections are lost.
[2025-09-12T18:30:07] codex
**Proposing handover event structure**

I'm suggesting we create a 'handover' event structure shaped as a map with "type: handover" and "data" containing "from" and "to" coordinates. I'll also add tests for this. We should implement a WebSocket connections gauge and snapshot bytes metrics by tracking bytes for serialized messages with JSON length. 

I plan to integrate `expvar` for HTTP metrics through an existing sim server's HTTP endpoint at '/debug/vars'. We can keep this minimal while including feature flags for toggling bots and persistence in the configuration. Lastly, I'll outline a detailed proposal with sections and specific tasks for each milestone.
[2025-09-12T18:30:07] codex

**Scope & Baseline**

- Purpose: Complete M3→M5 plus Non-Functional with minimal, focused changes; Go 1.21, `gofmt` style, `//go:build ws` guards, and Makefile flows.
- Current: Local sharding, AOI radius, cadence, telemetry, and hysteresis are largely in place. WS transport exists behind `-tags ws`. Bots and persistence are stubs/TODOs.
- Guardrails: Prefer `make` targets for run/test/build; keep PRs ~<300 LOC with tests; WS-only code/tests behind `//go:build ws` and verified by `make test-ws`.

**Phase Plan (2–4 Weeks)**

- M3 (handover polish + AOI continuity): 3–4 days
- M4 (bots + density + wander/separation): 4–6 days
- M5 (persistence + reconnect): 5–7 days
- Non-Functional (obs + security): integrated across phases, last-mile hardening 1–2 days
- CI gates: `make fmt vet test` and `make test-ws` on every PR

**M3 — Local Handover & AOI Continuity**

Tasks by package

- `internal/sim`
  - Intent: Ensure cell handover emits a transport event and AOI remains stable (no dup/loss).
  - Changes:
    - None to core handover math (already in `handovers.go`); maintain current hysteresis logic.
    - Add small helper: `CurrentCell(id string) (spatial.CellKey, bool)` for cheap read of current owned cell (or reuse `GetPlayer`).
  - Acceptance:
    - Handover triggers only after H meters; no thrash at border.
    - AOI includes entities across borders; no duplicates during/after handover.
  - Tests:
    - Unit: border pacing—no premature handover (exists).
    - Unit: AOI cross-border inclusive (exists).
- `internal/transport/ws` (ws build tag)
  - Intent: Emit `handover` event and measure basic metrics around it.
  - Changes (additive protocol):
    - Track `lastCell := ack.Cell` in writer loop; each snapshot tick, compare with current via `eng.GetPlayer`; on change, send `{type:"handover", data:{from:{cx,cz}, to:{cx,cz}}}` before next `state`.
    - Add gauge/counters (expvar-backed) for `ws_connected`, `ws_state_msgs_total`, `ws_state_bytes_total`, `handover_events_total`.
  - Acceptance:
    - Handover event arrives < 250ms from threshold crossing (at next snapshot).
    - No duplicate IDs in `state.entities` around handover.
  - Tests (guarded `//go:build ws`):
    - WS: cross-border move; expect at least one `handover` envelope and subsequent `state` with coherent player cell.
    - WS: AOI entities remain visible across border; no duplicates in a window (e.g., 500ms).
- `cmd/sim`
  - Intent: Expose metrics endpoint.
  - Changes:
    - Register `mux.Handle("/debug/vars", expvar.Handler())` (no third-party deps).
  - Acceptance:
    - `/debug/vars` exposes metrics snapshot; server runs with WS (`make run`).

Protocol & migration

- Additive only: new `handover` envelope; existing clients not broken. No message field renames.
- Bump a simple config `protocol` string in `join_ack.config` if desired (optional).

**M4 — Bots & Density Targets**

Tasks by package

- `internal/sim`
  - Intent: Maintain per‑cell bot density; add wander + simple separation.
  - Changes:
    - `Config` additions: `BotTargetPerCell int`, `BotGlobalCap int` (default 0 disables).
    - Engine state: `botState map[string]*botState`; `bots.go` fleshed out.
    - Tick loop: call `maintainBotDensity()` and `updateBot()` for all bot entities.
    - Spawner: choose random positions within a cell; ensure no spam if global cap reached.
    - Separation: if neighbor within 2m, steer away (simple vector push); clamp `botSpeed`.
  - Acceptance:
    - If a cell population (players+bots) < target, bots spawn to reach target within 10s (±20%).
    - Global cap respected; bots despawn when significantly over target for > 5s.
    - Movement looks plausible (direction retarget 3–7s; max speed ≤ 1.5 m/s).
  - Tests:
    - Unit: deterministic RNG seed; after N steps, observed entity count within target ±20%.
    - Unit: separation—two bots under 2m move apart next ticks.
    - Unit: bot velocity clamp ≤ `botSpeed`.
- `cmd/sim`
  - Intent: Configure bots via flags with safe defaults.
  - Changes:
    - New flags: `-bots_target`, `-bots_cap`; plumb into `sim.Config`.
    - Document in `docs/dev/DEV.md`.
  - Acceptance:
    - `-bots_target=5` yields ~5 entities per cell in ~10s locally.

**M5 — Persistence & Reconnect**

Tasks by package

- `internal/store` (new)
  - Intent: Abstract persistence with a minimal interface for M5.
  - Changes:
    - Define `type PlayerStore interface { Load(ctx, id) (pos spatial.Vec2, ok bool); Save(ctx, id, pos, stat) error }`.
    - `memstore` implementation (in‑memory map) for dev/tests; later swap to Postgres.
  - Acceptance:
    - Simple load/save usable by join and on disconnect; thread‑safe.
  - Tests:
    - Unit: load/save round‑trip; concurrent access safety.
- `internal/join`
  - Intent: Spawn from last known position.
  - Changes:
    - Update `HandleJoin` signature to accept a `PlayerStore` (breaking change within repo).
    - On auth OK: attempt `store.Load`; fall back to `(0,0)`; include pos in `JoinAck`.
  - Acceptance:
    - First login spawns at `(0,0)`; subsequent logins spawn near (≤1m) last saved pos.
  - Tests:
    - Unit: fake store returns saved pos; ack pos matches; error path falls back to `(0,0)`.
- `internal/transport/ws` (ws build tag)
  - Intent: Save on disconnect and enable reconnect.
  - Changes:
    - `Register(...)` accepts a `PlayerStore`; on connection close, fetch latest player snapshot and `store.Save`.
    - Reconnect flow: a new hello with same token leads to normal join (pos restored); no duplicate server entity remains.
      - Implementation detail: On join, `AddOrUpdatePlayer` overwrites if id exists; writer loop tears down with connection close.
  - Acceptance:
    - Drop and reconnect within 2s restores position within 1m; no duplicate player entities or double streaming.
  - Tests:
    - WS: join, move, drop (close socket), rejoin; assert position continuity and entity count == 1 for the id.
- `cmd/sim`
  - Intent: Wire up store; maintain dev simplicity.
  - Changes:
    - Instantiate `memstore` (default). Leave a TODO comment and flag placeholder for Postgres DSN later (no-op now).
  - Acceptance:
    - Works out-of-the-box with in‑memory store; tests GREEN.

Migration

- Breaking compile changes are internal only (new parameter threading). Protocol remains additive.
- Staggered PRs: introduce `internal/store` + join change; then adapt `ws.Register` and call sites.

**Observability**

Metrics (add via `expvar` with `/debug/vars`)

- `sim.tick_time_ms` (float): average tick duration over last N ticks.
- `sim.snapshot_hz` (int): effective snapshot rate computed over last second.
- `sim.snapshot_bytes_total` (int): sum of JSON bytes sent in `state`.
- `sim.entities_in_aoi` (int): last AOI size for current connection; optionally a distribution as min/avg/max counters.
- `sim.handover_latency_ms` (float): time from OwnedCell change detection to event send (approximate at snapshot granularity).
- `sim.ws_connected` (int): current active WS connections.
- Gateway: `gateway.sessions_total`, `gateway.validate_ok_total`, `gateway.validate_fail_total`.

Logging

- Keep brief structured logs for handovers, join, disconnect (ids, cells, latencies).

Tests

- WS (tagged) can sample `/debug/vars` using httptest server to assert metric presence and basic monotonicity (budget friendly).

**Security**

- Auth:
  - Keep token validation via gateway `/validate`; ensure timeouts (e.g., 1s) on HTTP client in `join.HTTPAuth`.
  - Optionally add simple token TTL at gateway (dev only), refreshed on `/login`.
- Input clamps:
  - Already clamp intent to [-1,1] and scale; ignore client `dt`.
  - Add server-side maximum position delta sanity check per tick (optional WARN).
- Heartbeat/timeouts:
  - WS: Add read inactivity timeout (e.g., 30s) by wrapping `wsjson.Read` with `context.WithTimeout`; close if exceeded.
  - Continue server-initiated Ping for telemetry; close on Ping failure.
- Rate limits:
  - Soft-limit input deque size (already drops under backpressure).
- Surface hardening:
  - Ensure `/ws` only with `-tags ws` (already enforced).
  - Avoid panics on malformed JSON; current code ignores unknown/malformed input safely.

**Risk Register**

- Join/store signature change
  - Risk: Widespread mechanical changes. Mitigation: land in small PR (join + memstore + sim wiring), then WS change; keep tests guiding.
- Handover event spam or ordering
  - Risk: Duplicate events near borders. Mitigation: edge-detect with lastCell; send once per change.
- Bot performance in dense scenes
  - Risk: Per-tick neighbor checks. Mitigation: cap bots per cell; simple separation only when within small radius; use cell-local scans.
- Payload growth from bots
  - Risk: Exceed 30KB/s. Mitigation: maintain budget test; lower snapshot rate or AOI radius for bots if needed; consider sampling bots.
- Flaky time-based tests
  - Risk: CI variance. Mitigation: generous tolerances (±20ms cadence), deterministic RNG, retry windows.

**Execution Timeline**

Week 1 (M3 + Observability/Security hooks)

- Day 1–2: WS handover event + tests (`internal/transport/ws`, `cmd/sim` metrics route). Gate: `make test-ws` GREEN.
- Day 3: AOI duplication test around handover; add read timeout + small HTTP client timeout. Gate: `make fmt vet test` GREEN.

Week 2 (M4 Bots)

- Day 4–6: Bot density (+config) + wander, separation, clamps; tests in `internal/sim`. Gate: `make test`.
- Day 7: Payload budget check with bots enabled (ws test). Gate: `make test-ws`.

Week 3 (M5 Persistence)

- Day 8–9: `internal/store` + `join.HandleJoin` signature change + unit tests.
- Day 10: Wire store into `cmd/sim`, adapt `ws.Register` to save on disconnect; reconnect flow tests. Gates: `make test` + `make test-ws`.
- Day 11: Docs updates and backlog status bump; final polish.

Parallelizable streams

- Bots (M4) and store scaffolding (M5) can progress in parallel after M3 merges.
- Observability and security tweaks can land alongside respective features.

**Concrete Changes (by file/module)**

- `backend/internal/transport/ws/register_ws.go`:
  - Add handover event emission (track lastCell).
  - Add `expvar` counters/gauges and increment/update on connect/state/handover.
  - Add read inactivity timeout around `wsjson.Read`.
- `backend/cmd/sim/main.go`:
  - Register `"/debug/vars"` via `expvar.Handler()`.
  - New flags: `-bots_target`, `-bots_cap`; plumb into `sim.Config`.
- `backend/internal/sim/*.go`:
  - `engine.go`: call `maintainBotDensity()` and bot updates in `tick`; helper for current cell read if needed.
  - `bots.go`: implement spawn/despawn + wander + separation; track `botState`.
  - `types.go`: extend `Config` with bot settings (defaults 0).
- `backend/internal/store/` (new):
  - `store.go`: interface + memstore impl + tests.
- `backend/internal/join/join.go`:
  - Modify `HandleJoin(ctx, auth, store, eng, hello)` to load last pos before spawn; update tests.
- `backend/internal/join/auth_http.go`:
  - Add HTTP client timeout (~1s).
- Tests:
  - `backend/internal/transport/ws/ws_integration_test.go`: add handover-event test, AOI cross-border no-dup test, reconnect test (M5).
  - `backend/internal/sim/*_test.go`: add bots density/separation tests.
  - `backend/internal/store/store_test.go`: load/save tests.
  - All WS tests guarded with `//go:build ws`.

**Acceptance Criteria Summary**

- M3:
  - Handover after hysteresis; emits `{type:"handover"}`; AOI contiguous; no dups; latency < 250ms. Tests pass under `make test-ws`.
- M4:
  - Bots maintain per-cell density (±20% in 10s); capped globally; wander + separation; clamps respected. `make test` GREEN.
- M5:
  - Save pos on disconnect; reconnect restores within 1m in <2s; no ghost entities; session integrity. `make test` + `make test-ws` GREEN.
- Non-Functional:
  - `/debug/vars` exposes metrics; inputs clamped; read timeout enforced; gateway validate uses timeout. Light tests and manual checks OK.

**Protocol & Schema Migration Strategy**

- Additive envelopes only (handover, telemetry already present). No breaking changes.
- Document envelope in `docs/dev/DEV.md` and update backlog status notes with a short transcript.
- If future fields added (e.g., version), use optional fields inside `join_ack.config`.

**CI & Gates**

- Every PR:
  - `make fmt vet test` and, when touching WS, `make test-ws`.
  - Keep diffs small; include tests and doc updates:
    - `docs[2025-09-12T18:31:18] ERROR: stream error: stream disconnected before completion: Transport error: error decoding response body; retrying 1/5 in 195ms…

[2025-09-12T18:31:28] thinking

**Creating a Planning Document**

I need to focus on producing a planning document without modifying any files since the system is read-only. The goal is to create a comprehensive, high-leverage implementation plan for moving from milestone M3 to M5, including non-functional aspects, particularly for the Go backend. I'll outline elements like transport, handovers, bots, persistence, observability, and security. Each task will have clear intent, changes proposed, and acceptance criteria, all while adhering to Go 1.21 conventions and keeping changes minimal.
**Outlining Security Measures**

I’m focusing on key security notes like authentication and token validation, velocity clamps, timeouts, and heartbeats. I'll create a risk register with mitigations and an execution timeline that includes parallel streams and CI gates. There are existing tests for areas like AOI and handovers, but I need to add tests for specific handover events, bots, persistence, and enforce NF metrics. I want to align with the docs backlog and address the confusion around the repeated story ID US-202 to propose necessary updates.
**Proposing Implementation Tasks**

I’m suggesting tasks for M3, which include finalizing hysteresis, adding a WebSocket 'handover' event emission when OwnedCell changes, and ensuring AOI across borders involves checking neighbor sets to avoid duplicates and flaps. I'll add a test for AOI that already exists, but we need to verify if it's flagged as Not Started due to features not being wired in. For M4, I’ll work on bots and density, integrating functions into the engine and proposing toggles for target density settings.
**Implementing Spawner and Persistence Features**

I’m planning to implement a spawner that ensures cell entities include bots to maintain minimum counts. I'll set deterministic RNG seeds for tests by allowing RNG injection or setting it during engine initialization. The design will also include logic to remove excess entities when density exceeds a threshold and a separation rule to prevent clustering. For persistence in M5, I’ll start with an in-memory map for local development, with plans for Postgres later, while ensuring compliance with AGENTS guidelines. I'll also enhance the join handler to manage player states.
**Implementing WebSocket and Gateway Enhancements**

I’m working on multiple improvements for WebSocket handling and gateway functionality. I want to save players' positions when they disconnect and rejoin, manage connection lifecycle events, and add heartbeat functionality with timeouts. I'll propose changes to ensure we track ping and pong events accurately. For observability, I’ll incorporate basic metrics using expvar, which will help monitor tick times and connections. Additionally, I need to refine how we send handover events and improve bot configurations, all while ensuring security measures like token validation and rate limiting are in place.
**Drafting Plan for Handover Event and Testing**

I’m proposing a series of tasks to implement and test the 'handover' event and related functionalities. First, I’ll track the timestamp when the lastOwnedCell changes and approximate the crossing time for handover detection. The test plan includes unit tests for handover events, engine tests for bot density, and ensuring player position persistence on reconnect. I’ll also ensure no ghost entities remain on disconnection. Additionally, I’ll integrate a timeout for inactive connections and set up observability tests to verify metrics. Finally, I need to address migration considerations for protocols and schemas, focusing on minimal changes while still implementing relevant configurations.
**Preparing Detailed Plan for Handover Implementation**

I’m outlining our project plan using clear headers and bullet points to maintain organization. Each milestone will have defined acceptance criteria and testing requirements. I’ll describe tasks for M3, M4, and M5 phases, while ensuring references to repository files and code.

For non-functional metrics, I’ll include aspects such as logging, security, and input validation, along with a risk register to note potential obstacles. I'll also lay out a strategic timeline emphasizing parallel tasks. Finally, I'll ensure that comments regarding the Gateway's session updates and observability tests are integrated seamlessly into the plan, reflecting our detailed approach.
[2025-09-12T18:33:11] codex
**Outlining Security Measures**

I’m focusing on key security notes like authentication and token validation, velocity clamps, timeouts, and heartbeats. I'll create a risk register with mitigations and an execution timeline that includes parallel streams and CI gates. There are existing tests for areas like AOI and handovers, but I need to add tests for specific handover events, bots, persistence, and enforce NF metrics. I want to align with the docs backlog and address the confusion around the repeated story ID US-202 to propose necessary updates.
[2025-09-12T18:33:11] codex
**Proposing Implementation Tasks**

I’m suggesting tasks for M3, which include finalizing hysteresis, adding a WebSocket 'handover' event emission when OwnedCell changes, and ensuring AOI across borders involves checking neighbor sets to avoid duplicates and flaps. I'll add a test for AOI that already exists, but we need to verify if it's flagged as Not Started due to features not being wired in. For M4, I’ll work on bots and density, integrating functions into the engine and proposing toggles for target density settings.
[2025-09-12T18:33:11] codex
**Implementing Spawner and Persistence Features**

I’m planning to implement a spawner that ensures cell entities include bots to maintain minimum counts. I'll set deterministic RNG seeds for tests by allowing RNG injection or setting it during engine initialization. The design will also include logic to remove excess entities when density exceeds a threshold and a separation rule to prevent clustering. For persistence in M5, I’ll start with an in-memory map for local development, with plans for Postgres later, while ensuring compliance with AGENTS guidelines. I'll also enhance the join handler to manage player states.
[2025-09-12T18:33:11] codex
**Implementing WebSocket and Gateway Enhancements**

I’m working on multiple improvements for WebSocket handling and gateway functionality. I want to save players' positions when they disconnect and rejoin, manage connection lifecycle events, and add heartbeat functionality with timeouts. I'll propose changes to ensure we track ping and pong events accurately. For observability, I’ll incorporate basic metrics using expvar, which will help monitor tick times and connections. Additionally, I need to refine how we send handover events and improve bot configurations, all while ensuring security measures like token validation and rate limiting are in place.
[2025-09-12T18:33:11] codex
**Drafting Plan for Handover Event and Testing**

I’m proposing a series of tasks to implement and test the 'handover' event and related functionalities. First, I’ll track the timestamp when the lastOwnedCell changes and approximate the crossing time for handover detection. The test plan includes unit tests for handover events, engine tests for bot density, and ensuring player position persistence on reconnect. I’ll also ensure no ghost entities remain on disconnection. Additionally, I’ll integrate a timeout for inactive connections and set up observability tests to verify metrics. Finally, I need to address migration considerations for protocols and schemas, focusing on minimal changes while still implementing relevant configurations.
[2025-09-12T18:33:11] codex
**Preparing Detailed Plan for Handover Implementation**

I’m outlining our project plan using clear headers and bullet points to maintain organization. Each milestone will have defined acceptance criteria and testing requirements. I’ll describe tasks for M3, M4, and M5 phases, while ensuring references to repository files and code.

For non-functional metrics, I’ll include aspects such as logging, security, and input validation, along with a risk register to note potential obstacles. I'll also lay out a strategic timeline emphasizing parallel tasks. Finally, I'll ensure that comments regarding the Gateway's session updates and observability tests are integrated seamlessly into the plan, reflecting our detailed approach.
**Objective**

Deliver a concrete, minimal‑change plan to complete M3→M5 and Non‑Functional goals for the Go backend (gateway + sim), WebSocket transport, AOI, handovers, bots, persistence, observability, and security. Aligns with AGENTS.md, Makefile flows, Go 1.21, and existing tests/build tags.

---

**Phase Plan (2–4 Weeks)**

- Week 1: Finish M3 (handover events, AOI across borders), baseline security hardening, WS tests green.
- Week 2: M4 bots (density target + wander + basic separation) behind config flags; metrics foundation.
- Week 3: M5 persistence (in‑mem store + reconnect + on‑close save/remove), WS reconnection tests.
- Week 4: Non‑Functional polish (metrics, payload gauges, heartbeat), docs/progress updates, CI gates.

Parallelizable streams: Observability metrics + WS gauges (Week 1–2) can proceed alongside bots (Week 2). Persistence and reconnect (Week 3) mostly isolated to `join` + WS close hooks.

---

**M3 — Local Sharding & AOI Continuity**

- Handover Event Emission
  - Intent: Notify clients on cell ownership change; keep it additive and optional.
  - Changes:
    - `backend/internal/transport/ws/register_ws.go`: Track `prevCell` per connection in writer loop. When `p.OwnedCell` changes, send `{ "type": "handover", "data": { "from": {cx,cz}, "to": {cx,cz} } }` immediately, then continue normal state cadence.
    - Add config flag in join ack for client feature detection: `join_ack.config.handover_events: true` (additive).
  - Acceptance:
    - Crossing borders triggers a single `handover` message (<250ms).
    - No duplicate or missing entity ownership during the move.
  - Tests (WS; `//go:build ws`):
    - New `handover_ws_test.go`: drive a player from (9.9,0) east across x=10 with hysteresis satisfied; expect one `handover` with correct from/to cells and subsequent `state` consistent with new cell.

- Hysteresis Thrash Guard (verify/expand)
  - Intent: Ensure stable ownership around borders with noise.
  - Changes:
    - None unless failing tests; current `crossedBeyondHysteresis` is correct and covered.
  - Acceptance:
    - Ownership does not thrash when oscillating within ±(H-ε).
  - Tests:
    - Extend `handovers_test.go` with a pacing sequence (+/−1m around border with H=2m); confirm ownership unchanged.

- AOI Continuity Across Borders
  - Intent: Maintain AOI visibility of neighbors across borders during and after handover.
  - Changes:
    - Engine already queries 3×3 via `QueryAOI`; no change expected.
    - WS state payload already includes `entities` from `QueryAOI`; no change expected.
  - Acceptance:
    - Moving across border keeps entity within radius visible; no AOI flapping.
  - Tests:
    - Existing `TestAOI_CoversAcrossBorder_NoFlap` covers engine; add WS‑level test `aoi_ws_test.go` (move across border while a neighbor sits at +0.5m in next cell; assert continuous presence in `state.entities`).

- Protocol Migration (lean)
  - Additive only: new `handover` envelope and `join_ack.config.handover_events=true`. Legacy clients can ignore unknown `type`.

---

**M4 — Bots & Density**

- Bot Density Target (config‑driven)
  - Intent: Maintain minimum population per cell via bots; off by default.
  - Changes:
    - `backend/internal/sim/types.go`: Extend `Config` with `BotTargetPerCell int`, `BotMaxTotal int` (default 0 disables).
    - `backend/cmd/sim/main.go`: Flags `-bot_target`, `-bot_max`; include in `/config`.
    - `backend/internal/sim/bots.go`: Implement `maintainBotDensity`:
      - Every 500ms, for cells with player presence (or any entity), spawn bots up to `BotTargetPerCell` if under target; despawn if over target.
      - Enforce global cap `BotMaxTotal`.
      - `Engine` helpers: `spawnBot(cellKey)`, `despawnBot(id)`, `countBots(cellKey)`, and bot ID allocator (`bot-<short>`).
    - `backend/internal/sim/engine.go`: Call `maintainBotDensity()` each tick (low overhead).
  - Acceptance:
    - With `BotTargetPerCell=5`, a cell reaches 4–6 bots within 10s and stays within ±20% under churn; global cap enforced.
  - Tests:
    - Unit: Deterministic seed; simulate ticks; assert bot counts per cell and global cap.
    - WS integration: Join, wait for density fill; assert bots included in `entities` with `kind=1` (Bot).

- Wander + Separation
  - Intent: Believable local motion; disperse clusters.
  - Changes:
    - `backend/internal/sim/bots.go` `[2025-09-12T18:33:50] ERROR: stream error: stream disconnected before completion: Transport error: error decoding response body; retrying 2/5 in 375ms…

[2025-09-12T18:34:02] thinking

**Creating a detailed plan**

I need to draft a comprehensive, high-leverage plan based on the user's request for planning only, without file modifications. In this read-only environment, I’ll focus on tasks aligned with AGENTS.md, organizing them by milestones and packages. I'll include acceptance criteria, test plans, and a migration strategy for protocol changes. It's essential to mention observability, security notes, a risk register, and execution timelines. I’ll also incorporate specific file paths and details from the existing code to keep it concrete and relevant.
**Proposing M3 tasks**

I need to propose some M3 tasks, like finishing the hysteresis and adding a handover event to the WebSocket. I want to ensure that the Area of Interest (AOI) remains contiguous across borders, specifically for US-302, while leveraging existing tests. I’ll need to implement the 'handover' event emission when ownership changes in the engine loop, detecting changes in OwnedCell. Also, I should consider how to transport this event to the client effectively, aiming for immediate delivery within a 250ms threshold.
**Refining event detection**

I’m considering that with a snapshot frequency of 10Hz, which translates to 100ms, we should be able to detect changes on each tick in the reader/writer loops. The WebSocket writer loop currently uses a ticker for snapshots and telemetry, so I want to add a check for changes in OwnedCell and send a 'handover' event immediately. I can use either a separate 'handoverCh' or add a check on the ticker to ensure we meet the acceptance criteria of under 250ms. I'll also add tests in ws_integration_test.go to verify this functionality.
**Planning M4 for bots and density**

For M4, I'm focusing on bots and maintaining density. There are placeholder functions, and I need to implement `maintainBotDensity` within the engine's tick or outside of it. I'll call this function at a low cadence, maybe every second, since `engine.tick` already handles handovers. For testing, I plan to use a deterministic random number generator by seeding it in the Engine config. I’ll create a bot states map and ensure bots spawn at random positions near the cell center while integrating configuration fields for limits like `BotTargetPerCell`. I'll break this down into small PR tasks to keep changes manageable.
**Drafting the M5 Plan**

For M5, the first step is to propose in-memory persistence to keep changes minimal. I’ll add a storage interface for saving and loading player states and provide an in-memory implementation for development. Later, I can introduce an optional Postgres setup. I need to ensure quick reconnections and propose saving player states on disconnect while implementing a mechanism to load these states on rejoining. I’ll extend the `join.HandleJoin` to accept a `Persister` interface for this. Additionally, I'll focus on observability by integrating `expvar` for metrics and address security by enforcing timeouts and velocity clamps. I should also lay out a risk register and an execution timeline with weekly sprints.
**Structuring the Plan with Requirements**

I’ll include adjustments to 'wsprobe' for optional telemetry and 'handover' events while keeping it straightforward for development. We need to set acceptance criteria for tasks and mention build tags for ws-specific tests. I'll ensure to address observability and security, using Makefile targets without modifying files directly. 

My plan will start with 'Scope & Assumptions' referencing AGENTS.md, then present a 'Phased Plan Overview' detailing milestones M3, M4, and M5. I'll organize tasks in clear sections with defined acceptance conditions, metrics tracking, and list any risks or feature flags needed.
**Finalizing Configuration Changes**

In the Go code, I'm proposing new fields in `sim.Config`, including optional ones like `BotTargetPerCell`, `BotMaxTotal`, and flags for persistence and timeouts. Specifically, I might add `PersistenceEnabled` as a boolean and strings for `StoreDSN`, along with integer fields for `ReadTimeoutSec` and `HeartbeatTimeoutSec`.

For command-line options, I will recommend flags like `bots`, `bots_target`, `bots_cap`, `persist`, `dsn`, `idle`, and `readtimeout`. It's important to maintain our WS tests with appropriate build tags. With this finalized, I can confidently prepare the plan document, highlighting that the US-202 snapshot test is complete while also suggesting optional improvements for `wsprobe`.
[2025-09-12T18:35:34] codex
**Proposing M3 tasks**

I need to propose some M3 tasks, like finishing the hysteresis and adding a handover event to the WebSocket. I want to ensure that the Area of Interest (AOI) remains contiguous across borders, specifically for US-302, while leveraging existing tests. I’ll need to implement the 'handover' event emission when ownership changes in the engine loop, detecting changes in OwnedCell. Also, I should consider how to transport this event to the client effectively, aiming for immediate delivery within a 250ms threshold.
[2025-09-12T18:35:34] codex
**Refining event detection**

I’m considering that with a snapshot frequency of 10Hz, which translates to 100ms, we should be able to detect changes on each tick in the reader/writer loops. The WebSocket writer loop currently uses a ticker for snapshots and telemetry, so I want to add a check for changes in OwnedCell and send a 'handover' event immediately. I can use either a separate 'handoverCh' or add a check on the ticker to ensure we meet the acceptance criteria of under 250ms. I'll also add tests in ws_integration_test.go to verify this functionality.
[2025-09-12T18:35:34] codex
**Planning M4 for bots and density**

For M4, I'm focusing on bots and maintaining density. There are placeholder functions, and I need to implement `maintainBotDensity` within the engine's tick or outside of it. I'll call this function at a low cadence, maybe every second, since `engine.tick` already handles handovers. For testing, I plan to use a deterministic random number generator by seeding it in the Engine config. I’ll create a bot states map and ensure bots spawn at random positions near the cell center while integrating configuration fields for limits like `BotTargetPerCell`. I'll break this down into small PR tasks to keep changes manageable.
[2025-09-12T18:35:34] codex
**Drafting the M5 Plan**

For M5, the first step is to propose in-memory persistence to keep changes minimal. I’ll add a storage interface for saving and loading player states and provide an in-memory implementation for development. Later, I can introduce an optional Postgres setup. I need to ensure quick reconnections and propose saving player states on disconnect while implementing a mechanism to load these states on rejoining. I’ll extend the `join.HandleJoin` to accept a `Persister` interface for this. Additionally, I'll focus on observability by integrating `expvar` for metrics and address security by enforcing timeouts and velocity clamps. I should also lay out a risk register and an execution timeline with weekly sprints.
[2025-09-12T18:35:34] codex
**Structuring the Plan with Requirements**

I’ll include adjustments to 'wsprobe' for optional telemetry and 'handover' events while keeping it straightforward for development. We need to set acceptance criteria for tasks and mention build tags for ws-specific tests. I'll ensure to address observability and security, using Makefile targets without modifying files directly. 

My plan will start with 'Scope & Assumptions' referencing AGENTS.md, then present a 'Phased Plan Overview' detailing milestones M3, M4, and M5. I'll organize tasks in clear sections with defined acceptance conditions, metrics tracking, and list any risks or feature flags needed.
[2025-09-12T18:35:34] codex
**Finalizing Configuration Changes**

In the Go code, I'm proposing new fields in `sim.Config`, including optional ones like `BotTargetPerCell`, `BotMaxTotal`, and flags for persistence and timeouts. Specifically, I might add `PersistenceEnabled` as a boolean and strings for `StoreDSN`, along with integer fields for `ReadTimeoutSec` and `HeartbeatTimeoutSec`.

For command-line options, I will recommend flags like `bots`, `bots_target`, `bots_cap`, `persist`, `dsn`, `idle`, and `readtimeout`. It's important to maintain our WS tests with appropriate build tags. With this finalized, I can confidently prepare the plan document, highlighting that the US-202 snapshot test is complete while also suggesting optional improvements for `wsprobe`.
**Scope & Principles**

- Aligns with AGENTS.md and Makefile flows; Go 1.21, ws-only code/tests behind `//go:build ws`; prefer `make fmt vet test` and `make test-ws`.
- Minimal, focused changes; small PRs with tests and docs updates in `docs/process/*` and `docs/dev/DEV.md`.

**Horizon & Outcomes (2–4 Weeks)**

- M3: Finish hysteresis handover; contiguous AOI across borders; emit `handover` event over WS.
- M4: Bot density targets per cell; simple wander + separation; caps.
- M5: Persistence: save pos + simple stat on disconnect; reconnect resumes state.
- Non‑Functional: Observability (expvar) and Security (timeouts, clamps, heartbeat).

---

**Milestone M3 — Handover + AOI**

- Intent: Complete local sharding handover with hysteresis, ensure AOI continuity, and surface handover to clients.
- Changes:
  - `backend/internal/transport/ws/register_ws.go` (ws):
    - Add handover event emission: track `lastCell`; on change, send `{type:"handover", data:{from:{cx,cz}, to:{cx,cz}}}` immediately or at next snapshot (≤100ms).
    - Add reader idle timeout (e.g., 15s) via per‑read context deadline to drop silent clients.
    - Metrics (expvar): increment `sim_ws_handover_total`, record `sim_ws_handover_latency_ms` (event sent time − cell change detect time; detect at snapshot observation).
    - Metrics (expvar): `sim_ws_connected` gauge; `sim_snapshot_bytes_total` (sum of JSON len).
  - `backend/internal/sim/handovers.go`:
    - Keep hysteresis logic; no API change. Add micro‑helper to fetch player’s `OwnedCell` for ws loop (already via `GetPlayer`).
  - Tests:
    - Unit: `internal/sim/handovers_test.go` table expanded: diagonal crossings, negative coords, border epsilon.
    - WS integration (ws): new test `handover_event_test.go` in `internal/transport/ws`:
      - Join, set velocity to cross east border; assert receive a `handover` with correct cells within 250ms of crossing (tolerate snapshot cadence).
    - AOI continuity (engine): extend `aoi_test.go` to move across border and ensure neighbor remains visible pre/post handover (no duplicates).
  - Acceptance:
    - Handover occurs only after ≥H meters into target cell; `handover` event delivered within ≤250ms; AOI results stable across border; `make test` + `make test-ws` GREEN.

---

**Milestone M4 — Bots & Density**

- Intent: Maintain per‑cell population targets with simple bot behavior; enforce caps.
- Changes:
  - `backend/internal/sim/types.go`:
    - Extend `Config` with `BotTargetPerCell int`, `BotMaxTotal int`.
  - `backend/internal/sim/bots.go`:
    - Implement `maintainBotDensity()`:
      - Every ~1s, for each populated cell with players, ensure `countBots(cell) ~ BotTargetPerCell` within ±20%; spawn/despawn bots as needed; respect `BotMaxTotal`.
      - Spawn position: random within cell bounds with margin; ID `bot-<short>`.
      - Keep `botState` map; reuse existing `updateBot` to set velocity; add basic separation when <2m (steer away, clamp speed).
  - `backend/internal/sim/engine.go`:
    - Call `maintainBotDensity()` on a 1Hz ticker (cheap) and call `updateBot(...)` per tick for existing bots.
  - Tests:
    - Unit: deterministic RNG via `rand.Seed(1)` in test; simulate ticks; assert bot counts per cell in [target-20%, target+20%]; assert global cap.
    - WS integration (ws): join, wait ≤10s; assert `entities` includes bots (`kind=1`) and stays within bounds across a few snapshots.
  - Acceptance:
    - With `BotTargetPerCell=5`, cell converges to 4–6 bots ≤10s; stays within ±20% under churn; cap enforced; GREEN tests.

---

**Milestone M5 — Persistence & Reconnect**

- Intent: Persist last position + simple stat; restore on join; save on disconnect.
- Changes:
  - `backend/internal/join`:
    - Add optional persistence hook via new interface `LoaderSaver` (new file `persist.go`):
      - `Load(ctx, playerID) (pos spatial.Vec2, ok bool)`, `Save(ctx, playerID, pos spatial.Vec2, stat int) error`.
    - Extend `HandleJoin` to accept an optional `LoaderSaver` (nil-safe) and, when present, load last pos before `eng.AddOrUpdatePlayer`.
    - Update unit tests to cover default (no loader) and with loader.
  - `backend/cmd/sim/main.go`:
    - Flags: `-persist` (bool, default false), `-dsn` (string, optional).
    - Wire a `LoaderSaver` implementation:
      - Default: in‑memory map (CI friendly).
      - Optional (later PR): postgres stub behind build tag or interface (not required for CI).
    - Add expvar import to expose `/debug/vars` implicitly; add simulation metrics registries.
  - `backend/internal/transport/ws/register_ws.go`:
    - On connection close (defer), if persistence enabled, `Save` last pos and stat.
    - Heartbeat: if idle timeout triggers, still persist.
  - Tests:
    - Unit: `join` with fake `LoaderSaver` returns loaded pos; `Save` called on “close”.
    - WS integration (ws): join, move, close (client side), rejoin; assert start pos within ≤1m of saved pos.
  - Acceptance:
    - Save on disconnect; reconnect restores within 1m in <2s; no ghost entities; `make test` + `make test-ws` GREEN.

---

**Non‑Functional — Observability**

- Intent: Minimal metrics via stdlib `expvar` exposed at `/debug/vars` on sim HTTP server.
- Metrics to add:
  - `sim_tick_ms` (last tick duration), `sim_snapshot_bytes_total`, `sim_entities_in_aoi` (last count), `sim_ws_connected` (gauge), `sim_ws_handover_total`, `sim_ws_handover_latency_ms` (last).
- Changes:
  - `backend/cmd/sim/main.go`: import `_ "expvar"`; initialize expvar.Int/Float vars; plumb simple setters from engine and ws.
  - `backend/internal/transport/ws/register_ws.go`: bump counters/gauge; accumulate snapshot byte totals.
  - `backend/internal/sim/engine.go`: measure tick duration; publish to expvar.
- Tests:
  - Light integration (optional): probe vars in process using http test server; assert presence and sane ranges.

---

**Non‑Functional — Security**

- Token validation:
  - `backend/internal/join/auth_http.go`: set `http.Client{Timeout: 1 * time.Second}`; per‑request context timeout.
- Transport:
  - Input clamps: keep `clamp()` and server‑side speed constant; ignore client `dt` for velocity.
  - Idle timeout: `wsjson.Read` with context deadline (e.g., 15s) in reader goroutine; disconnect if idle.
  - Sequence handling: keep ack monotonic; ignore out‑of‑order lower seq.
  - Add basic read payload limit via size guard on `json.RawMessage` length before unmarshal (drop oversized).
- Engine/gameplay:
  - Velocity cap enforced server‑side; reject impossible intent (>1).
- Tests:
  - Auth failure path (already covered); velocity clamp (send 999 intent; speed stays at cap); idle timeout disconnect (reader exits after deadline).

---

**Protocol & Schema Migration**

- Strategy: additive only; maintain envelope `{type, data, error?}`.
- New messages: `handover` event (M3).
- New fields: metrics and config additions in `join_ack.config` may include `bots_enabled`, `target_per_cell`, `persistence` flags (optional).
- Docs: update `docs/dev/DEV.md` (WS envelopes), `docs/process/BACKLOG.md` and `PROGRESS.md` with status and test notes.
- Versioning: if necessary, add optional `version` in `join_ack.config`; not required for current scope.

---

**Risks & Mitigations**

- AOI boundary flapping: Use `eps` tolerance (already in `QueryAOI`); test diagonal and epsilon cases.
- Time‑based test flakiness: Use broad tolerances and deterministic seeds; rely on snapshot cadence tolerances ±20ms.
- Bot thrash: Tick separation logic and 1Hz density loop; hysteresis on spawn/despawn (e.g., ±20% band).
- Persistence coupling: Keep behind interface; default in‑mem; DB optional later to avoid CI deps.
- WS backpressure: Non‑blocking writes with 2s deadline; drop on timeout; measure payload bytes to watch budget.
- Large diffs risk: Slice into focused PRs per story (≤300 LOC) with tests.

---

**Execution Timeline & Parallelization**

- Week 1 (M3 focus):
  - WS handover event + idle timeout + metrics (ws) [ws-only].
  - AOI continuity test expansion (engine).
  - CI: `make fmt vet test` + `make test-ws` GREEN.
- Week 2 (M4 focus):
  - Config fields + `maintainBotDensity` + wander/separation.
 [2025-09-12T18:36:22] ERROR: stream error: stream disconnected before completion: Transport error: error decoding response body; retrying 3/5 in 875ms…

[2025-09-12T18:36:39] thinking

**Considering options for cell management**

I’m weighing two options for handling cell management in a connection. Option A suggests keeping a lastCell per connection to compare changes in player cells and send an event when it updates. Option B involves a more complex approach with an engine emitting a handover channel. 

I need to ensure continuity when players move across borders, maintaining their proximity to neighbors. Plus, I’ll address some "TODO" comments related to maintaining bot density. Keeping a deterministic random seed might be prudent too!
**Updating bot configuration and states**

I’m working on tests to ensure deterministic behavior by setting `rand.Seed`. I need to add configuration fields for bots like BotTargetPerCell, BotMaxTotal, and BotEnabled while keeping the code under 300 lines. My plan is to include two config fields and a maintain function operating at 1Hz.

I’ll need to decide where to store the bot state; since Entities exist within cell and players maps, I can use a separate map for bot states in the Engine. Adding a simple `map[string]*botState` should work, even if it slightly exceeds the changes I initially anticipated.
**Implementing bot density maintenance**

I need to add a `maintainBotDensity` function that iterates through cells, counts current bots, and spawns new ones if the count is below the target and the global cap isn’t exceeded. Each new bot will have a random position and a `botState` initialized with the current time.

Next, I'll update the tick function to manage these bots. Currently, the tick only integrates player velocities, so I’ll need to iterate over all entities in each cell. I should ensure that bot positions are updated based on their velocities and add general integration for bot entities to ensure proper movement!
**Combining player and bot integration**

I’m thinking about how to integrate both players and bots effectively. I can loop through cells to update the positions of non-player entities while keeping the existing player integration. This may require some extra code, but it's manageable.

For testing bot density, I’ll configure `BotTargetPerCell` to be small and `BotMaxTotal` to be large, then step through time to ensure the count of bots in each cell is close to the target. I’ll also make sure the maintain function runs correctly during the tests!
**Planning a systems update**

I’m considering the integration of maintaining bot density and ensuring it’s deterministic. To do this, I’ll implement a 'lastDensityCheck' field and schedule the maintain function after each tick. We want to control bot spawning to avoid thrashing.

For persistence, I plan to add an in-memory store interface, integrating it into the `HandleJoin` function without disturbing the existing signature too much.

Moving on to observability, utilizing expvar for metrics sounds good, including tracking connection pings and maintaining a grasp of latency. There are numerous tasks to accomplish in the coming weeks, so I’ll structure our workload carefully!
**Crafting the structured plan**

I need to create a structured plan document that follows the "Final answer structure and style guidelines." This means keeping things concise, ideally within 10 lines, while including relevant details like acceptance criteria and testing for each task.

I will organize the plan by milestones and packages, detailing file changes needed. Additionally, I’ll outline a risk register, migration strategy, and observability metrics. Key components will include build tags for tests, ensuring minimal changes, and specific sections addressing security, timeline, and CI gates. I’ll integrate everything into a clear, comprehensive format for easy implementation!
[2025-09-12T18:37:47] codex
**Updating bot configuration and states**

I’m working on tests to ensure deterministic behavior by setting `rand.Seed`. I need to add configuration fields for bots like BotTargetPerCell, BotMaxTotal, and BotEnabled while keeping the code under 300 lines. My plan is to include two config fields and a maintain function operating at 1Hz.

I’ll need to decide where to store the bot state; since Entities exist within cell and players maps, I can use a separate map for bot states in the Engine. Adding a simple `map[string]*botState` should work, even if it slightly exceeds the changes I initially anticipated.
[2025-09-12T18:37:47] codex
**Implementing bot density maintenance**

I need to add a `maintainBotDensity` function that iterates through cells, counts current bots, and spawns new ones if the count is below the target and the global cap isn’t exceeded. Each new bot will have a random position and a `botState` initialized with the current time.

Next, I'll update the tick function to manage these bots. Currently, the tick only integrates player velocities, so I’ll need to iterate over all entities in each cell. I should ensure that bot positions are updated based on their velocities and add general integration for bot entities to ensure proper movement!
[2025-09-12T18:37:47] codex
**Combining player and bot integration**

I’m thinking about how to integrate both players and bots effectively. I can loop through cells to update the positions of non-player entities while keeping the existing player integration. This may require some extra code, but it's manageable.

For testing bot density, I’ll configure `BotTargetPerCell` to be small and `BotMaxTotal` to be large, then step through time to ensure the count of bots in each cell is close to the target. I’ll also make sure the maintain function runs correctly during the tests!
[2025-09-12T18:37:47] codex
**Planning a systems update**

I’m considering the integration of maintaining bot density and ensuring it’s deterministic. To do this, I’ll implement a 'lastDensityCheck' field and schedule the maintain function after each tick. We want to control bot spawning to avoid thrashing.

For persistence, I plan to add an in-memory store interface, integrating it into the `HandleJoin` function without disturbing the existing signature too much.

Moving on to observability, utilizing expvar for metrics sounds good, including tracking connection pings and maintaining a grasp of latency. There are numerous tasks to accomplish in the coming weeks, so I’ll structure our workload carefully!
[2025-09-12T18:37:47] codex
**Crafting the structured plan**

I need to create a structured plan document that follows the "Final answer structure and style guidelines." This means keeping things concise, ideally within 10 lines, while including relevant details like acceptance criteria and testing for each task.

I will organize the plan by milestones and packages, detailing file changes needed. Additionally, I’ll outline a risk register, migration strategy, and observability metrics. Key components will include build tags for tests, ensuring minimal changes, and specific sections addressing security, timeline, and CI gates. I’ll integrate everything into a clear, comprehensive format for easy implementation!
**Scope**

- Focus: Go backend (`cmd/gateway`, `cmd/sim`, `internal/{sim,spatial,join,transport/ws}`).
- Goals: Complete M3 (handover + AOI continuity), M4 (bots/density), M5 (persistence + reconnect), and Non‑Functional (observability + security).
- Guardrails: Small, focused PRs (<~300 LOC), Go 1.21, `gofmt`, `make` targets, WS code/tests under `//go:build ws`.

**Milestone Plan (M3→M5 + Non‑Functional)**

- M3 — Handover + AOI Continuity
  - Intent: Finalize hysteresis handover and surface a transport event; ensure AOI continuity across borders.
  - Changes:
    - `internal/transport/ws/register_ws.go`:
      - Add “handover” envelope when player’s `OwnedCell` changes (compare against last seen cell per-connection).
      - Track last cell in writer loop; send `{"type":"handover","data":{"from":{cx,cz},"to":{cx,cz}}}` before first “state” after change.
      - WS counters: increment on accept, decrement on close (for metrics); measure bytes for each “state” write.
      - Idle timeout/heartbeat: track last input time; disconnect after configurable idle (default 60s).
    - `internal/sim/handovers.go`:
      - No algorithm change (already implements hysteresis); add a tiny helper (unexported) to return boolean if a handover occurred this tick for a given player ID (optional). Minimal path uses WS-side detection only.
    - Tests:
      - `internal/transport/ws/ws_integration_test.go` (ws): new test “handover event”:
        - Join, set velocity to cross east border beyond hysteresis; assert a `handover` envelope observed within 250ms.
        - Assert next “state” shows `player.pos` monotonic and no duplicate entities.
      - `internal/sim/aoi_test.go`: already has border continuity test; add one more case for north/south border.
    - Acceptance:
      - Handover event emitted with correct `from`→`to` values; arrives <250ms from crossing threshold.
      - AOI continuity holds across borders for 3×3 neighborhood; no duplicates.
  - Make targets: `make test` + `make test-ws` GREEN.

- M4 — Bots & Density
  - Intent: Maintain target density per cell with simple wander and separation; keep diffs small and deterministic in tests.
  - Changes:
    - `internal/sim/types.go`:
      - Extend `Config`: `BotEnabled bool`, `BotTargetPerCell int`, `BotMaxTotal int`.
    - `internal/sim/engine.go`:
      - Add bot tick/update: integrate non-player `Entity` positions (bots) each tick alongside players.
      - Call `maintainBotDensity()` every tick (fast path) and keep actual spawn/despawn throttled at ~1 Hz inside that function to prevent thrash.
    - `internal/sim/bots.go`:
      - Implement `maintainBotDensity()`:
        - For each cell, count bots; if `< target` and under global cap, spawn up to N (small batch, e.g., 1–2 per tick) at random in-bounds positions; if `> target*1.2`, despawn down to hysteresis band (±20%).
      - Implement `updateBot()` (exists) + add minimal separation: if another entity within <2m, bias direction away slightly.
      - Add `spawnBot(cellKey)`/`despawnBot(id)` helpers; keep IDs as `bot-<short>`.
    - `cmd/sim/main.go`:
      - Flags: `-bots` (bool), `-bots_target` (int, default 0), `-bots_cap` (int).
      - Set these into `sim.Config`.
    - Tests:
      - `internal/sim/bots_test.go`: deterministic `rand.Seed`; create 1 cell; set target=5, cap large:
        - Step 10s worth of ticks; assert 4–6 bots present and stable within band; assert cap enforced when target is high.
      - `internal/transport/ws/ws_integration_test.go` (ws): join, wait up to ~2s; assert `entities` include bots (`kind=1`) and remain within AOI radius bounds.
    - Acceptance:
      - With `BotTargetPerCell=5`, a populated cell reaches 4–6 bots within ~10s and remains within ±20%.
      - Global cap respected; bots wander with speed clamp; no clustering at <2m on average over 10s.

- M5 — Persistence + Reconnect
  - Intent: Save player position on disconnect; load last known position on join; support reconnect in <2s without ghosts.
  - Changes (minimal, pluggable, no external DB dependency by default):
    - `internal/store` (new small package):
      - Interface `PlayerStore { GetPos(ctx, playerID) (spatial.Vec2, bool); SavePos(ctx, playerID, pos spatial.Vec2) error }`
      - `memstore.go` in-memory impl for CI/tests.
    - `internal/join/join.go`:
      - Replace the `TODO (M5)` with: if `store != nil` and hit, use saved position; else default.
      - Approach: add an optional `join.SpawnPolicy` or pass `store` into `HandleJoin` via small wrapper; to keep signature stable, add `join.HandleJoinWithStore(ctx, auth, eng, store, hello)` and keep existing `HandleJoin` delegating with `nil`.
    - `internal/transport/ws/register_ws.go`:
      - On handler exit (defer), fetch player’s latest position via `eng.GetPlayer()` and `store.SavePos()`; ensure not called twice; protect with context timeout 500ms.
    - `cmd/sim/main.go`:
      - Flags: `-persist` (bool, default false), `-dsn` (string, optional future), wire `memstore` when `-persist` set.
    - Tests:
      - `internal/join/join_test.go`: create `memstore`, set a pos, call `HandleJoinWithStore`, assert `JoinAck.pos` approx equals saved.
      - `internal/transport/ws/ws_integration_test.go` (ws): join, send movement, wait for a few states, close; then rejoin using same token and injected `memstore`; assert new `join_ack.pos` within 1m of prior.
    - Acceptance:
      - Save position on disconnect; next join restores within ≤1m; reconnect flow does not produce ghost duplicate entities; ≤2s end-to-end within tests.

- Non‑Functional — Observability & Security
  - Intent: Minimal metrics via `expvar`, basic hardening of auth and transport behavior.
  - Changes:
    - Metrics (`expvar`):
      - `cmd/sim/main.go`: import `_ "expvar"`; expose `/debug/vars`.
      - `internal/transport/ws/register_ws.go`: publish:
        - `ws_connected` (gauge), `state_msgs_total`, `state_bytes_total`, `telemetry_msgs_total`, `handover_events_total`.
      - `internal/sim/engine.go`: publish:
        - `tick_time_ms_last`, `snapshot_time_ms_last`, `players_total`, `cells_total`, optionally `handover_count_total`.
      - Optional: `entities_in_aoi_last` emitted by WS per-connection average (counter/sum).
    - Security:
      - `internal/join/auth_http.go`: set `http.Client{Timeout: 1 * time.Second}` for `/validate` calls.
      - `internal/transport/ws/register_ws.go`:
        - Clamp input intent to [-1,1] (already present) and server-side moveSpeed constant.
        - Idle/heartbeat timeout (disconnect if no input for `IdleTimeoutSec`, default 60).
        - Read/write deadlines per op via contexts (already used); keep ≤2s.
      - `cmd/sim/main.go`: flags `-idle` (seconds, default 60) and `-readtimeout` (ms) wired into WS handler env/config.
    - Tests:
      - Light metric sanity in ws tests (e.g., read `/debug/vars` in httptest server and assert counters increase).
      - Security path: invalid token join → `error { code: "auth" }` (already covered); add idle timeout E2E (sleep >idle then expect close).

**Package-Level Task Breakdown**

- `internal/transport/ws`
  - Handover event: last-cell tracking; `handover_events_total` counter; state payload bytes measurement using `json.Marshal(msg)` before `wsjson.Write` for metrics only.
  - Idle timeout: `lastInputAt` tracking, close if `time.Since(lastInputAt) > Idle`.
  - Tests: new ws tests for handover event and idle timeout; ensure “ws” build tag.

- `internal/sim`
  - Bots: integrate non-player entities in `tick`; implement density maintenance and basic separation; seedable tests.
  - Minimal helper for future handover latency (optional): store per-player candidate start time if needed later; not required for M3.

- `internal/join`
  - Persistence-aware join: introduce `HandleJoinWithStore`; use stored position if present.

- `internal/store` (new)
  - `memstore.go` only (for CI/tests). Keep interface small to avoid coupling.

- `cmd/sim`
  - New flags: `-bots`, `-bots_target`, `-bots_cap`, `-persist`, `-dsn`, `-idle`, `-readtimeout`.
  - Wire `HTTPAuth` (already) with timeout and `Register` WS with configured idle; hook `expvar`.

- `cmd/gateway`
  - No protocol change. Optional: add `ReadHeaderTimeout` on `http.Server` (security hardening).

**Acceptance Criteria & Test Plan (Per Story)**

- US-301 Handover with hysteresis:
  - Criteria: one `handover` event emitted at threshold crossing; AOI includes neighbors before/after; no duplicates.
  - Tests: ws integration “handover event”; unit tests already cover hysteresis; AOI border continuity test exists.

- US-302 Continuous AOI across borders:
  - Criteria: AOI from `QueryAOI` includes entities in adjacent cell within radius during and after crossing.
  - Tests: extend `aoi_test.go` with north/south border; keep 3×3 scan.

- US-401 Density target per cell:
  - Criteria: per-cell bot population stabilizes at target ±20% within 10s; cap respected.
  - Tests: `bots_test.go` deterministic; snapshot counts; WS test sees bots in `entities`.

- US-402 Wander + separation:
  - Criteria: bots re-target every 3–7s; speed ≤ botSpeed; average nearest-neighbor distance ≥2m over 10s window.
  - Tests: unit: run fixed seed; compute simple stats to assert constraints.

- US-501 Save last position:
  - Criteria: on disconnect, position saved; next join spawns within 1m.
  - Tests: join→move→close→rejoin; assert position; mock store injection.

- US-502 Reconnect/resume:
  - Criteria: reconnect avoids ghost entities; single authoritative player entity after resume.
  - Tests: simulate drop and reconnect; query `/dev/players` or state to ensure no duplicate IDs.

- US-NF1 Observability:
  - Criteria: `/debug/vars` exposes metrics; counters/gauges increment reasonably during ws tests.
  - Tests: in httptest server, GET `/debug/vars` after activity and assert presence/values.

- US-NF2 Security base:
  - Criteria: token validation timeout; velocity clamp; idle disconnect.
  - Tests: negative path for auth; send impossible intents (e.g., x=99) and observe clamp via state; idle timeout closes.

**Protocol & Schema Migration**

- Strategy: Additive only; no breaking changes.
  - New `handover` server→client envelope; no change to `join_ack`, `state`, or `telemetry` shapes.
  - Document in `docs/dev/DEV.md` (message table) and add a short transcript in PRs.
- Versioning: If needed later, add optional `version` field under `join_ack.config`; no enforcement now.
- Rollout: Land WS event + tests first; client prototype can ignore unknown `type` without breakage.

**Observability Checklist**

- Gauges:
  - `ws_connected`, `players_total`, `cells_total`.
- Counters:
  - `state_msgs_total`, `state_bytes_total`, `telemetry_msgs_total`, `handover_events_total`.
- Timings:
  - `tick_time_ms_last`, `snapshot_time_ms_last`.
- Distribution (lightweight):
  - Track `entities_in_aoi_last` and simple moving average (optional).
- Surfacing:
  - `/debug/vars` via `expvar`; optional logs at INFO with cadence summaries.

**Security Notes**

- Auth: `HTTPAuth` uses 1s timeout; sim rejects invalid tokens (already); consider name sanitization for logs.
- Movement safety: clamp intent ∈ [-1,1]; server moveSpeed constant; optional server-side speed sanity check to prevent speed hacks.
- Transport: heartbeat/idle timeout; short per-write deadlines (2s) with drop-on-timeout.
- Resource limits: WS read limit (nhooyr default is generous); optionally add `c.SetReadLimit` if needed later.
- Inputs: ignore unknown message types; drop malformed JSON.

**Risk Register**

- Duped entities on reconnect:
  - Mitigation: save on close; on join, reuse or upsert single player entity by ID; add test.
- Bot thrash or perf regressions:
  - Mitigation: 1Hz density adjustment; hysteresis band ±20%; deterministic tests[2025-09-12T18:38:55] ERROR: stream error: stream disconnected before completion: Transport error: error decoding response body; retrying 4/5 in 1.483s…

[2025-09-12T18:39:34] thinking

**Documenting event additions**

I'm documenting the addition of a 'handover' event. I'll create a timeline for the next two weeks, outlining tasks while keeping pull requests below 300 lines of code. I need to ensure that tests and documentation updates are included. For the 'handover event,' I’ll propose new tests in our backend to confirm the event emission when certain thresholds are crossed. I also want to add metrics aggregators and planning for documentation updates throughout the process.
**Crafting final plan**

I need to create a final plan following the "Final answer structure and style guidelines." This means using section headers with a **Title** format, employing bullets with bold keywords and succinct descriptions, and grouping related items together. While I want to keep it succinct, the user has requested a comprehensive plan, so I can use a multi-section structure. I’ll outline the goals and approach, then detail the phase sequence for the upcoming weeks while avoiding any code modifications.
**Planning milestones for M3 to M5**

I'm outlining a plan for the next 2–4 weeks with specific milestones. For M3, I'll focus on finalizing the US-301 and US-302, while M4 will look at US-401 and US-402, and M5 will tackle US-501 and US-502 along with non-functional items like US-NF1 and US-NF2.

For each milestone, in M3, I’ll address the handover event emission in the websocket. This involves tracking the last cell to send a handover event and establishing acceptance criteria. I'll include proposed tests and ensure the Area of Interest (AOI) functions correctly while checking for duplicates during crossing scenarios. Lastly, hysteresis thrash tests will be added for stability along borders.
**Detailing M4 Bot Density**

For M4, I'm focusing on bot density management. First, I'll add fields in the configuration for BotTargetPerCell, BotMaxTotal, and BotEnabled. The implementation involves creating a tick method that computes cell occupancy combining players and bots, spawning 'KindBot' entities, and updating the bots.go file with robust logic. 

I want to track bot states and implement separation logic to avoid neighbors. The acceptance criteria will target density within ±20% over 10 seconds, and I’ll create relevant tests to validate these conditions. Finally, I’ll ensure the websocket reflects that 'entities' include bots and verify their presence with existing tests.
**Planning M5: Persistence, Observability, Security, and More**

For M5, I'm introducing a new `persist` package for player positions, ensuring that when a player joins, their position is loaded. To handle reconnections, I'll ensure we map player IDs correctly and test the join functionality thoroughly with a fake store.

Next, I’ll implement observability metrics with minimal amounts for tracking, and ensure HTTP authentication includes timeouts. Security includes a WebSocket heartbeat and input validation. I’ll maintain an additive approach to protocol changes with proper documentation.

Finally, I’ll organize this plan into sections for clarity, detailing scope, milestones, and testing requirements while emphasizing parallel development streams.
**Creating a Comprehensive Plan**

I'm aiming for a plan that's about 200–400 lines long, so I’ll keep it concise with bullets while ensuring it remains comprehensive as requested by the user. I'll adhere to the style guidelines, using **Title Case** for section headers and formatting bullets with bold keywords followed by descriptions. 

I’ll integrate important elements from previous attempts, including the "handover event structure," "expvar metrics," and "feature flags for bots and persistence." I’ll also propose ws connection gauges and snapshot byte metrics. While we can't run tests yet, I’ll ensure the plan includes necessary build tags for ws tests and mentions "Makefile flows." Let’s get this plan ready to go!
[2025-09-12T18:40:24] codex
**Crafting final plan**

I need to create a final plan following the "Final answer structure and style guidelines." This means using section headers with a **Title** format, employing bullets with bold keywords and succinct descriptions, and grouping related items together. While I want to keep it succinct, the user has requested a comprehensive plan, so I can use a multi-section structure. I’ll outline the goals and approach, then detail the phase sequence for the upcoming weeks while avoiding any code modifications.
[2025-09-12T18:40:24] codex
**Planning milestones for M3 to M5**

I'm outlining a plan for the next 2–4 weeks with specific milestones. For M3, I'll focus on finalizing the US-301 and US-302, while M4 will look at US-401 and US-402, and M5 will tackle US-501 and US-502 along with non-functional items like US-NF1 and US-NF2.

For each milestone, in M3, I’ll address the handover event emission in the websocket. This involves tracking the last cell to send a handover event and establishing acceptance criteria. I'll include proposed tests and ensure the Area of Interest (AOI) functions correctly while checking for duplicates during crossing scenarios. Lastly, hysteresis thrash tests will be added for stability along borders.
[2025-09-12T18:40:24] codex
**Detailing M4 Bot Density**

For M4, I'm focusing on bot density management. First, I'll add fields in the configuration for BotTargetPerCell, BotMaxTotal, and BotEnabled. The implementation involves creating a tick method that computes cell occupancy combining players and bots, spawning 'KindBot' entities, and updating the bots.go file with robust logic. 

I want to track bot states and implement separation logic to avoid neighbors. The acceptance criteria will target density within ±20% over 10 seconds, and I’ll create relevant tests to validate these conditions. Finally, I’ll ensure the websocket reflects that 'entities' include bots and verify their presence with existing tests.
[2025-09-12T18:40:24] codex
**Planning M5: Persistence, Observability, Security, and More**

For M5, I'm introducing a new `persist` package for player positions, ensuring that when a player joins, their position is loaded. To handle reconnections, I'll ensure we map player IDs correctly and test the join functionality thoroughly with a fake store.

Next, I’ll implement observability metrics with minimal amounts for tracking, and ensure HTTP authentication includes timeouts. Security includes a WebSocket heartbeat and input validation. I’ll maintain an additive approach to protocol changes with proper documentation.

Finally, I’ll organize this plan into sections for clarity, detailing scope, milestones, and testing requirements while emphasizing parallel development streams.
[2025-09-12T18:40:24] codex
**Creating a Comprehensive Plan**

I'm aiming for a plan that's about 200–400 lines long, so I’ll keep it concise with bullets while ensuring it remains comprehensive as requested by the user. I'll adhere to the style guidelines, using **Title Case** for section headers and formatting bullets with bold keywords followed by descriptions. 

I’ll integrate important elements from previous attempts, including the "handover event structure," "expvar metrics," and "feature flags for bots and persistence." I’ll also propose ws connection gauges and snapshot byte metrics. While we can't run tests yet, I’ll ensure the plan includes necessary build tags for ws tests and mentions "Makefile flows." Let’s get this plan ready to go!
**Scope & Goals**

- Finish M3→M5 and Non-Functional with minimal, focused diffs; keep Go 1.21 style and Makefile flows.
- Prioritize in-process handover UX, AOI continuity, simple bots/density, reconnect via in‑memory persistence, and baseline observability/security.
- Guard WS-only code/tests with `//go:build ws` and validate via `make test-ws`.

**Phase Plan (2–4 Weeks)**

- Week 1 (M3): Handover event emission in WS, AOI continuity/duplication tests, idle timeouts, basic metrics.
- Week 2 (M4): Bot density controller and wander/separation with tests; config scaffolding.
- Weeks 3–4 (M5): In‑memory persistence + reconnect; save-on-close; observability polish; security clamps/timeouts.

**M3 — Handover + AOI Continuity**

- Intent: Emit a transport-level `handover` event on ownership change; ensure AOI remains contiguous across borders without duplication or flapping.
- Changes:
  - `backend/internal/transport/ws/register_ws.go`:
    - Track `lastCell` per connection; on each snapshot tick, compare with current `player.OwnedCell`.
    - When changed, send `{"type":"handover","data":{"from":{"cx","cz"},"to":{"cx","cz"}}}` before the next `state`.
    - Measure and accumulate `handover_latency_ms` (time from crossing threshold to event) using last tick time; increment `handover_count_total`.
    - Add per-conn lifecycle hooks to update `ws_connections`.
  - `backend/internal/sim/handovers_test.go`:
    - Add “paced-border no-thrash” case: oscillate within hysteresis band; assert no ownership flip.
  - `backend/internal/sim/aoi_test.go`:
    - Add duplication guard: move across border with neighbor entities in both cells; assert no duplicate IDs in `QueryAOI`.
  - Docs: Update `docs/process/BACKLOG.md` (US-301 In Progress → Done; add US-302 tests) and brief note in `docs/dev/DEV.md` describing `handover` envelope.
- Acceptance:
  - Crossing border triggers exactly one `handover` event; next `state` reflects new cell; latency < 250ms locally.
  - AOI includes neighbors across borders during and after handover; no duplicates; no flapping within hysteresis band.
- Tests:
  - WS (tag `ws`): new `ws/handovers_ws_test.go` to drive a player across the threshold and assert a `handover` event then `state` with new `OwnedCell`.
  - Engine unit: added border oscillation test; AOI duplication test.
  - CI: `make fmt vet test` + `make test-ws` GREEN.

**M4 — Bots & Density**

- Intent: Maintain target entity density per cell; bots wander believably and avoid tight clustering.
- Changes:
  - `backend/internal/sim/types.go`: extend `Config` with `BotEnabled bool`, `BotTargetPerCell int`, `BotMaxTotal int`.
  - `backend/internal/sim/engine.go`:
    - Call `maintainBotDensity()` at ~1Hz (use a ticker or `time.Since(last)` in `tick`); call `updateBot()` each tick for active bots.
  - `backend/internal/sim/bots.go`:
    - Implement `maintainBotDensity`: for each active cell, if total (players+bots) < target, spawn `KindBot` entities until within target; despawn if > target with hysteresis band ±20%.
    - Track `botState` per bot (dir, retargetAt); deterministic retarget cadence 3–7s; cap speed with `botSpeed`.
    - Add light separation: if neighbor distance < 2m, nudge dir away (bounded influence).
    - Bot ID allocator `bot-<short>`; helpers `spawnBot(cellKey)`, `despawnBot(id)`, `countBots(cellKey)`.
  - `backend/cmd/sim/main.go`:
    - Add flags: `-bots` (bool), `-bots_target`, `-bots_cap`; feed into `sim.Config`.
  - Docs: Update DEV flags and BACKLOG (US-401/402).
- Acceptance:
  - With `BotEnabled` and `BotTargetPerCell=5`, a populated cell converges to 4–6 total entities in ≤10s; global cap enforced; bots appear in WS `entities` with `kind=1`.
- Tests:
  - Unit (sim): deterministic seed; simulate >10s; assert per-cell count within ±20%; assert global cap.
  - Unit (sim): step wander/separation; assert speed clamp and minimum pairwise distance threshold over time (loose tolerance).
  - WS (optional): join, wait, assert at least one bot in `entities`.
  - CI: `make fmt vet test` (+ `make test-ws` if WS).

**M5 — Persistence + Reconnect**

- Intent: Save last position on disconnect; reconnect resumes position within 1m; no ghost duplicates.
- Changes:
  - `backend/internal/persist/` (new):
    - `store.go`: interface `Store{ LoadPos(id string)(spatial.Vec2,bool); SavePos(id string, pos spatial.Vec2) error }`.
    - `memstore.go`: in-memory mutexed map; default for local/dev/CI.
  - `backend/internal/join/join.go`:
    - Replace TODO with pluggable load: if store has pos, use it; else default `(0,0)`.
  - `backend/internal/transport/ws/register_ws.go`:
    - On connection close (defer), snapshot `eng.GetPlayer(id)` and `store.SavePos`; guard if missing.
  - `backend/cmd/sim/main.go`:
    - Flags: `-persist` (bool), `-dsn` (string placeholder), wire a `persist.Store` (mem when `-persist`).
    - Pass store into join/auth wiring (e.g., via a small app context or closure capturing store for `HandleJoin`).
  - Docs: Add quick note on persistence enablement; backlog US-501/502.
- Acceptance:
  - Move, disconnect, reconnect: spawn within 1m of saved pos in <2s; single player entity; no duplicate streaming.
- Tests:
  - Unit (persist): `memstore` load/save roundtrip.
  - Unit (join): fake store returns pos; ack.Pos equals stored.
  - WS (tag `ws`): connect, move, close, reconnect; assert near saved pos and single entity instance (via `eng.DevList()` or WS `entities` count for self=1).
  - CI: `make fmt vet test` + `make test-ws` GREEN.

**Non‑Functional — Observability**

- Intent: Minimal metrics, debuggability via `/debug/vars`.
- Changes:
  - `backend/cmd/sim/main.go` and `backend/cmd/gateway/main.go`:
    - `mux.Handle("/debug/vars", expvar.Handler())`.
  - Metrics (expvar globals; kept in respective packages):
    - `ws_connections` (int, gauge).
    - `handover_count_total` (int), `handover_latency_ms_last` (float).
    - `tick_time_ms_last` (float) and `tick_time_ms_p50` (optional simple EMA or rolling avg).
    - `snapshot_msgs_total` (int), `snapshot_bytes_total` (int), `entities_in_aoi_last` (int).
  - `backend/internal/sim/engine.go`:
    - Time the tick; publish `tick_time_ms_last`.
  - `backend/internal/transport/ws/register_ws.go`:
    - Count connections open/close; accumulate bytes for each `state` write; update `entities_in_aoi_last`.
- Acceptance:
  - `/debug/vars` returns numeric fields above; tick time generally < 2ms locally; bytes/s below ~30KB/client.
- Tests:
  - HTTP (httptest): call sim mux `/debug/vars`, assert keys and numeric types.
  - WS integration already asserts cadence/payload budget; add optional assertion on `snapshot_bytes_total` monotonically increasing.

**Non‑Functional — Security**

- Intent: Tighten auth, input, and transport timeouts; maintain stable UX.
- Changes:
  - `backend/internal/join/auth_http.go`:
    - `http.Client{Timeout: 1 * time.Second}`; per-request context deadlines remain.
  - `backend/internal/transport/ws/register_ws.go`:
    - Heartbeat/idle: if no successful Ping/Pong in `IdleTimeoutSec` (config), close connection; track last successful ping or input time; default 15s.
    - Clamp intent already enforced; add optional server-side sanity check: if `|vel| > moveSpeed` from inputs, clamp.
  - `backend/cmd/sim/main.go`:
    - Flags: `-idle` (seconds) and `-readtimeout` (per-write deadline already 2s; keep configurable if needed).
- Acceptance:
  - Invalid tokens rejected; idle clients closed after timeout; velocity never exceeds clamp; no regressions to WS tests.
- Tests:
  - Auth: fake gateway delayed; ensure HTTPAuth timeout triggers `auth` error fast.
  - Idle: reduce idle timeout in test; hold connection without pongs (can disable ping handler by not reading? else skip if brittle).
  - Velocity: send extreme intent; verify reported `player.vel` components within bounds.

**Protocol & Schema Migration**

- Approach: Additive only; no breaking changes.
  - New event: `handover` envelope (`type: "handover"`) with `{from:{cx,cz}, to:{cx,cz}}`.
  - Optional config fields may appear in `join_ack.config` (bots, idle timeout). Clients ignore unknown fields.
- Docs: Update `docs/dev/DEV.md` protocol section and `docs/process/BACKLOG.md` story states; include a short `wsprobe` transcript in PRs where relevant.

**Tasks By Package (Concrete)**

- `cmd/gateway`:
  - Add `/debug/vars`; optional `ReadHeaderTimeout` on server.
- `cmd/sim`:
  - Add flags: `-bots`, `-bots_target`, `-bots_cap`, `-persist`, `-dsn`, `-idle`.
  - Wire `expvar` handler; construct `persist.Store` when `-persist`.
- `internal/join`:
  - `auth_http.go`: client timeout.
  - `join.go`: load position via `store` when enabled.
- `internal/sim`:
  - `engine.go`: tick timing metric; call `maintainBotDensity()` at ~1Hz; expose simple getters if needed for tests.
  - `bots.go`: implement density + wander/separation; track internal `botState`.
  - Tests: border no‑thrash; AOI duplication; bot density/separation.
- `internal/transport/ws`:
  - `register_ws.go`: handover detection/event; metrics; heartbeat; bytes accounting; tests: handover event integration.
- `internal/persist` (new):
  - `store.go`, `memstore.go`; tests.

**Observability Checklist**

- WS gauges: `ws_connections`, `snapshot_msgs_total`, `snapshot_bytes_total`.
- Engine: `tick_time_ms_last` (and avg), `players_total`, `cells_total`.
- Handover: `handover_count_total`, `handover_latency_ms_last`.
- AOI: `entities_in_aoi_last`.
- Exposure: `/debug/vars` on both gateway and sim.
- Verify: Manual curl or test using `httptest`.

**Security Notes**

- Auth: 1s timeout to `/validate`; reject missing/empty token; limit name logging to avoid log injection.
- Movement: clamp inputs to [-1,1]; server `moveSpeed` constant; ignore `dt` from client (server-authoritative tick).
- Transport: heartbeat with drop-on-timeout; 2s write deadlines; drop malformed/unknown messages.
- Resource limits: bound channel sizes; drop inputs on backpressure (already present).
- Session: on reconnect ensure single entity via `AddOrUpdatePlayer`; save on close.

**Risk Register**

- Duplicate entities on reconnect:
  - Mitigation: reuse `AddOrUpdatePlayer`; save-on-close; reconnect overwrites; add WS test.
- Handover flapping at borders:
  - Mitigation: hysteresis (exists) + “paced-border no-thrash” test; event emission tied to cell change.
- Bot perf/cluster thrash:
  - Mitigation: 1Hz density loop; ±20% hysteresis band; separation cap; deterministic tests.
- Payload/throughput regressions:
  - Mitigation: byte counters; cadence test budget (<30KB/s/client); drop-on-timeout writes.
- Feature creep/large diffs:
  - Mitigation: slice into PRs per story (≤300 LOC) with tests and doc updates.

**Execution Timeline**

- Week 1:
  - WS handover detection/event + metrics; AOI duplication + border no‑thrash tests; gateway/sim `/debug/vars`.
  - Gate: `make fmt vet test` + `make test-ws`.
- Week 2:
  - Bot density + wander/separation; config flags; tests.
  - Gate: `make fmt vet test` (plus `make test-ws` if asserting bots via WS).
- Week 3:
  - Persistence interface + mem store; join load + save-on-close; basic reconnect test.
  - Gate: all tests green.
- Week 4:
  - Heartbeat/idle timeout; polish metrics; docs updates; backlog statuses; optional wsprobe tweaks[2025-09-12T18:41:30] ERROR: stream error: stream disconnected before completion: Transport error: error decoding response body; retrying 5/5 in 3.258s…

[2025-09-12T18:41:37] thinking

**Creating Implementation Plan**

I need to create a comprehensive implementation plan for the repository to achieve the next milestones while adhering to AGENTS.md. I see that the environment is read-only, and files cannot be modified. The user wants a planning document only, so I’ll structure it accordingly. I’ll organize tasks by milestones, detailing intent, changes, acceptance criteria, tests, migration strategies, metrics, security notes, risk management, and timelines while keeping it concise and comprehensive. Let’s get this organized!
**Reviewing Code Details**

I see that we have some code details: functions for AOI and handovers, plus tests for joining acknowledgments and WS integration. There's also telemetry and cadence tests. However, I noticed an inconsistency in backlog statuses—like US-202 marked as "Done," while US-301 is in progress and US-302 hasn’t started yet. Although there are observability tests, there are no metrics available. I think my plan should include adding expvar metrics for better insights. Let’s ensure everything aligns!
**Analyzing Transport WS Code**

In looking at the Transport WS code in `register_ws.go`, I see it handles functions like Accept, Hello, and reading input while updating velocity and telemetry. However, it lacks heartbeat or close detection, relying instead on a goroutine exit to signal done. There are 2s write deadlines, but no explicit idle read deadlines. I can propose adding ping/pong deadlines or utilizing `c.CloseRead`. Also, the library currently accepts any origin. We might consider implementing an origin check or using AcceptOptions for added security. Additionally, it seems like the gateway could benefit from expiration parameters for stored tokens.
**Planning Persistence and Bot Features**

For Persistence M5, I need to ensure that we save the position on disconnect. I can create a `store` interface with an in-memory store for testing. I'll configure DSN but keep the default as in-memory, allowing an optional `-persist` flag for future DB integration, though we can't add a database right now. Regarding Bots M4, we want to maintain density per cell and separate wandering. The existing `bots.go` has a skeleton for wanders, so I'll add `maintainBotDensity` to the engine tick and implement tracking for bot counts per cell.
**Drafting Handover and Persistence Plan**

I need to develop a detailed plan for handovers and persistence events in the WS code. Currently, the engine manages OwnedCell movement, but it doesn't send the 'handover' event. To address this, I propose detecting cell changes either in the engine or the WS loop by tracking previous OwnedCells and sending handover events at the next snapshot. Additionally, I'll implement tests for metrics and establish a migration strategy for protocol changes while ensuring to outline milestones and tasks for the next few weeks. This will cover all necessary sections, including acceptance criteria and security notes. Let's get this structured properly!
**Drafting the Implementation Plan**

I'm outlining the changes for various tasks:

- In `register_ws.go`, I’ll add the handover event, heartbeat, metrics counters, and track `lastSentCell`. Also, I'll possibly implement an 'error' message for timeouts.

- In `engine.go`, I’ll call `maintainBotDensity` and add `BotsTargetPerCell` and `BotsMaxTotal` to the config, keeping minimal changes.

- For `bots.go`, I’ll implement density maintenance and wander separation using a deterministic RNG for tests.

- In `join.go` and a new store interface, I'll implement `MemoryStore` to save positions at disconnect and load them on join.

- The `main.go` will accept new flags and register expvar for metrics.

Additionally, I’ll propose new tests for the WS integration such as handover events and idle disconnects, while ensuring observability through expvar metrics accessible via `/debug/vars`. I’ll compile the plan while keeping it concise yet comprehensive, referencing necessary acceptance criteria and security notes. Let's finalize this!
[2025-09-12T18:42:40] codex
**Reviewing Code Details**

I see that we have some code details: functions for AOI and handovers, plus tests for joining acknowledgments and WS integration. There's also telemetry and cadence tests. However, I noticed an inconsistency in backlog statuses—like US-202 marked as "Done," while US-301 is in progress and US-302 hasn’t started yet. Although there are observability tests, there are no metrics available. I think my plan should include adding expvar metrics for better insights. Let’s ensure everything aligns!
[2025-09-12T18:42:40] codex
**Analyzing Transport WS Code**

In looking at the Transport WS code in `register_ws.go`, I see it handles functions like Accept, Hello, and reading input while updating velocity and telemetry. However, it lacks heartbeat or close detection, relying instead on a goroutine exit to signal done. There are 2s write deadlines, but no explicit idle read deadlines. I can propose adding ping/pong deadlines or utilizing `c.CloseRead`. Also, the library currently accepts any origin. We might consider implementing an origin check or using AcceptOptions for added security. Additionally, it seems like the gateway could benefit from expiration parameters for stored tokens.
[2025-09-12T18:42:40] codex
**Planning Persistence and Bot Features**

For Persistence M5, I need to ensure that we save the position on disconnect. I can create a `store` interface with an in-memory store for testing. I'll configure DSN but keep the default as in-memory, allowing an optional `-persist` flag for future DB integration, though we can't add a database right now. Regarding Bots M4, we want to maintain density per cell and separate wandering. The existing `bots.go` has a skeleton for wanders, so I'll add `maintainBotDensity` to the engine tick and implement tracking for bot counts per cell.
[2025-09-12T18:42:40] codex
**Drafting Handover and Persistence Plan**

I need to develop a detailed plan for handovers and persistence events in the WS code. Currently, the engine manages OwnedCell movement, but it doesn't send the 'handover' event. To address this, I propose detecting cell changes either in the engine or the WS loop by tracking previous OwnedCells and sending handover events at the next snapshot. Additionally, I'll implement tests for metrics and establish a migration strategy for protocol changes while ensuring to outline milestones and tasks for the next few weeks. This will cover all necessary sections, including acceptance criteria and security notes. Let's get this structured properly!
[2025-09-12T18:42:40] codex
**Drafting the Implementation Plan**

I'm outlining the changes for various tasks:

- In `register_ws.go`, I’ll add the handover event, heartbeat, metrics counters, and track `lastSentCell`. Also, I'll possibly implement an 'error' message for timeouts.

- In `engine.go`, I’ll call `maintainBotDensity` and add `BotsTargetPerCell` and `BotsMaxTotal` to the config, keeping minimal changes.

- For `bots.go`, I’ll implement density maintenance and wander separation using a deterministic RNG for tests.

- In `join.go` and a new store interface, I'll implement `MemoryStore` to save positions at disconnect and load them on join.

- The `main.go` will accept new flags and register expvar for metrics.

Additionally, I’ll propose new tests for the WS integration such as handover events and idle disconnects, while ensuring observability through expvar metrics accessible via `/debug/vars`. I’ll compile the plan while keeping it concise yet comprehensive, referencing necessary acceptance criteria and security notes. Let's finalize this!
**Objective**

- Complete M3→M5 plus Non-Functional for the Go backend with minimal, focused changes; keep WS behind `//go:build ws`, follow Makefile flows, and keep PRs small with tests and docs updates.

**Guiding Principles**

- Prefer additive, non-breaking protocol changes.
- Isolate new behaviors behind flags/toggles; default to current behavior.
- Guard WS-only code and tests with `//go:build ws`; validate with `make test-ws`.
- Always run `make fmt vet test` (and `make test-ws` for WS) before pushing.

---

**Milestone M3 — Handover & AOI Continuity**

- Handover Event (WS)
  - Intent: Notify clients when `OwnedCell` changes after hysteresis; latency <250ms; no duplication.
  - Changes:
    - `backend/internal/transport/ws/register_ws.go`:
      - Track `lastCell` per connection; on tick, compare with `p.OwnedCell`; when changed, send `{"type":"handover","data":{"from":{"cx":int,"cz":int},"to":{"cx":int,"cz":int}}}` immediately before the next `state`.
      - Add `ws_connected` gauge (inc on accept, dec on exit).
      - Count/sum bytes for each `state` payload (`snapshot_bytes_total`), approximate via `json.Marshal(msg)` length.
    - No changes to engine logic for cell movement (already handled by `checkAndHandoverLocked`).
  - Acceptance:
    - Crossing border beyond hysteresis emits one `handover` event; delivered in ≤1 snapshot cycle.
    - No duplicate entities in `state.entities` immediately after event.
  - Tests (ws, tag `ws`):
    - New: `TestWS_Handover_Event_Once` — spawn at x=9.9 (cell 0,0), move east at 3 m/s, wait for `handover` then `state`; assert single event and `player.cell` transition (derived from `join_ack` and subsequent states).
    - New: `TestWS_State_NoDupes_AfterHandover` — ensure entity IDs unique across two consecutive states around transition.

- AOI Continuity Across Borders (Engine)
  - Intent: AOI results remain consistent across borders and during handover; no flapping at boundary.
  - Changes:
    - `backend/internal/sim/engine.go`: none functionally (AOI already queries 3×3 neighbors).
    - Minor: ensure `QueryAOI` uses inclusive radius as implemented (already tested).
  - Acceptance:
    - Entity across border within radius remains visible before/after crossing; no drop within one snapshot.
  - Tests (unit):
    - Existing: `TestAOI_CoversAcrossBorder_NoFlap` (kept).
    - New: `TestHandover_NoFlap_In_AOI_Window` — move anchor across border while target entity sits just across; AOI includes entity pre/post; no transient miss within one snapshot interval.

- Idle/Heartbeat & Read Deadline (WS)
  - Intent: Drop dead connections, enforce basic liveness.
  - Changes:
    - `register_ws.go`:
      - Reader goroutine uses per-read `context.WithTimeout` (e.g., 30s) to detect idle clients.
      - Maintain `lastInputAt`; disconnect if no input for `idle_timeout` (default off, enableable via flag).
      - Keep existing server `Ping` (for RTT); optional: if `Ping` fails consecutively N times, close.
  - Acceptance:
    - With `idle_timeout=5s`, client that sends no messages is disconnected within ≤7s.
  - Tests (ws):
    - New: `TestWS_IdleTimeout_Drops` — join, don’t send input, assert close within bound (tolerances).

- Docs
  - `docs/process/BACKLOG.md`: mark US-301 In Review → Done after merge; add US-302 plan notes and test IDs.
  - `docs/dev/DEV.md`: document `handover` event and idle timeout flag.

---

**Milestone M4 — Bots & Density**

- Density Controller
  - Intent: Maintain target bot population per cell with hysteresis; enforce global cap.
  - Changes:
    - `backend/internal/sim/types.go`:
      - Add config: `BotTargetPerCell int`, `BotMaxTotal int`, `BotEnabled bool` (default false).
    - `backend/internal/sim/engine.go`:
      - Call `maintainBotDensity()` at 1Hz (tie to snapshot cadence or a separate ticker in `loop`).
      - Provide helpers: count per-cell, global count.
    - `backend/internal/sim/bots.go`:
      - Implement `maintainBotDensity()`:
        - If `BotEnabled` and under target−hyst (e.g., −20%), spawn up to min(target, headroom); if over target+hyst, despawn a few.
        - Provide `spawnBot(cellKey)` with IDs `bot-<short>`, randomized spawn near cell center, `KindBot`.
        - Enforce `BotMaxTotal`.
      - Implement wander:
        - Keep `botState` map in engine (private), deterministic retarget every 3–7s, clamp speed to `botSpeed`.
        - Simple separation: when nearest neighbor within <2m, apply small steering away vector.
  - Acceptance:
    - With `BotTargetPerCell=5`, reaches between 4–6 bots per populated cell within 10s, stable thereafter; global cap respected.
  - Tests:
    - Unit (engine): seeded RNG; simulate 15s of steps; assert per-cell counts within ±20%; assert `<= BotMaxTotal`.
    - WS (tag `ws`): join, wait up to 2s, assert that some `entities` have `kind=1` (Bot) and remain visible >2 states.

- Docs
  - `docs/process/BACKLOG.md`: mark US-401/402 progress; note test IDs.
  - `docs/dev/DEV.md`: add flags and brief behavior description.

---

**Milestone M5 — Persistence & Reconnect**

- Store Abstraction (In-Memory First)
  - Intent: Save player position on disconnect and restore on join; DB optional later.
  - Changes:
    - New package: `backend/internal/store`:
      - `type Store interface { LoadPlayer(ctx, id string) (pos spatial.Vec2, ok bool); SavePlayer(ctx, id string, pos spatial.Vec2) error }`
      - `MemoryStore` impl for tests and default.
    - `backend/internal/join/join.go`:
      - Add optional store dependency (pass from `cmd/sim`); on join, `LoadPlayer`; if present, spawn near saved position (≤1m tolerance).
    - `backend/internal/transport/ws/register_ws.go`:
      - On connection close (defer path), capture latest `player` snapshot via `eng.GetPlayer` and call `SavePlayer`.
    - `backend/cmd/sim/main.go`:
      - Flags: `-persist` (bool), `-dsn` (string, unused for now), construct `MemoryStore` if enabled.
  - Acceptance:
    - After a disconnect, reconnect within 2s restores within 1m of last position; no ghost duplicate entity for same `player_id`.
  - Tests:
    - Unit (join/store): fake `AuthService` + `MemoryStore`; verify position loaded on join.
    - WS (tag `ws`): join, move (two inputs), close connection, reconnect with same token → assert position restored and single player instance.

- Protocol Stability
  - No wire-breaking changes. `join_ack` already carries `config`; new fields added under `config` (additive).

- Docs
  - `docs/process/BACKLOG.md`: mark US-501/502; include brief transcript.
  - `docs/dev/DEV.md`: add `-persist`, reconnect expectations.

---

**Non-Functional — Observability & Security**

- Metrics & `/debug/vars`
  - Intent: Ship minimal, useful metrics via `expvar` for local inspection and CI sanity.
  - Changes:
    - `backend/cmd/sim/main.go`:
      - Import `expvar` and `net/http/pprof` optional; expose `/debug/vars`.
      - Register vars: `tick_ms` (float, last), `snapshot_hz` (int), `ws_connected` (int), `snapshot_bytes_total` (int), `handover_count` (int).
    - `backend/internal/sim/engine.go`:
      - Measure tick duration; update `tick_ms`.
      - Increment `handover_count` in `checkAndHandoverLocked`.
    - `backend/internal/transport/ws/register_ws.go`:
      - Maintain `ws_connected`; add to `snapshot_bytes_total`.
  - Acceptance:
    - Hitting `/debug/vars` returns metrics; values change reasonably under load.
  - Tests:
    - Light unit tests for counters (where practical); otherwise manual verification in PR description via curl.

- Security Baseline
  - Auth: reuse `join.HTTPAuth`; add 1s timeout on `http.Client` and per-request deadline.
  - Movement: keep intent clamp (exists), optional server-side speed sanity (warn/drop if position delta > speed*2x).
  - Transport: idle read timeout, per-write 2s deadline (exists), heartbeat via Ping (exists); drop on timeouts.
  - Resource: optional `-max_conns` (future), `SetReadLimit` equivalent via per-read context.
  - Logs: avoid logging tokens; sanitize names in logs.

---

**Protocol & Schema Migration Strategy**

- Additive envelopes only:
  - New server→client `handover` event (no client breakage if ignored).
  - New metrics exposed under `/debug/vars`.
  - New config fields added to `join_ack.config` (clients can ignore).
- Document the `handover` event and new flags in `docs/dev/DEV.md`.
- Keep `wsprobe` compatible; optionally print `handover` if received (separate small PR).

---

**Per-Task Details (By Package/Path)**

- `internal/transport/ws`
  - Add: handover event, idle timeout, metrics counters, state payload byte counting.
  - Tests: `ws_integration_test.go` add handover and idle cases; existing tests remain.
- `internal/sim`
  - Use: existing handover logic; add counters; call bot density at low cadence; implement bot wander/separation.
  - Tests: density, wander, separation; AOI border robustness.
- `internal/join`
  - Add store plumbing to `HandleJoin` (optional param or struct field); load saved position when present.
  - Tests: join with saved pos (unit).
- `internal/store` (new)
  - Memory store for M5 acceptance; no DB dependency in CI.
  - Tests: basic save/load.
- `cmd/sim`
  - Flags: `-bots`, `-bots_target`, `-bots_cap`, `-persist`, `-dsn`, `-idle_timeout`.
  - Wire store into join; register `/debug/vars`; enforce `HTTPAuth` timeout.
- `cmd/gateway`
  - Optional: add `ReadHeaderTimeout` to HTTP server (security/usability).
  - No protocol change.

---

**Acceptance Criteria Summary**

- M3:
  - Handover event emitted once per cell change; arrival ≤250ms; AOI continuity across borders; idle timeout drops inactive conns. `make test` + `make test-ws` GREEN.
- M4:
  - Bot density within ±20% of target in 10s; wander/separation active; global cap enforced. `make test` GREEN (and `make test-ws` if asserting via stream).
- M5:
  - Save pos on disconnect; reconnect restores within 1m in <2s; no ghost entities; session integrity. `make test` + `make test-ws` GREEN.
- Non-Functional:
  - `/debug/vars` exposes metrics; inputs clamped; read timeout enforced; gateway validate uses timeout. Light tests and manual checks OK.

---

**Observability Checklist**

- Metrics:
  - `tick_ms`: last tick duration.
  - `snapshot_hz`: configured snapshot rate.
  - `ws_connected`: current websocket connections.
  - `snapshot_bytes_total`: cumulative bytes of `state` payloads.
  - `handover_count`: number of handovers since boot.
- Logging:
  - On handover (debug), join/leave, idle timeouts.
  - Snapshot logging stays off by default to keep noise low.
- Endpoints:
  - `/debug/vars` (expvar), `/healthz`, `/config`.

---

**Security Notes**

- Auth: `HTTPAuth` with 1s timeout and context deadline; do not log tokens.
- Velocity safety: clamp intent (exists); add server-side sanity on integrated velocity if needed (log and clamp).
- Timeouts: per-read 30s idle timeout; per-write 2s; heartbeat ping loop retained.
- Heartbeat: server Ping; option to require periodic input to avoid idle disconnect when client is silent.
- Resource bounds: buffered channels size 16 (exists); drop on backpressure maintained.

---

**Risk Register**

- Duplicate entities on reconnect:
  - Mitigation: always upsert via `AddOrUpdatePlayer` by `player_id`; save-on-close; test resume path.
- Handover thrash near borders:
  - Mitigation: existing hysteresis; AOI pulls 3×3; add test for no-flap and single-event emission.
- Bot thrash / perf regressions:
  - Mitigation: 1Hz density loop; ±20% band; deterministic tests; feature flag `-bots` default off.
- Persistence coupling / CI flakiness:
  - Mitigation: in-memory store; DB optional via flags only; tests use memory store.
- WS backpressure and payload budget:
  - Mitigation: maintain 2s write deadline; drop on timeout; track payload bytes; keep cadence budget (<30KB/s/client).
- Large diffs:
  - Mitigation: split into focused PRs per story (≤300 LOC) with tests and docs updates.

---

**Execution Timeline**

- Week 1 (M3 focus)
  - Implement WS handover event + idle timeout + metrics exposure; expand AOI border tests.
  - Update docs (handover event). CI gate: `make fmt vet test` + `make test-ws`.
- Week 2 (M4 focus)
  - Implement density controller with flags; wander + simple separation; tests.
  - Docs: flags and behavior. CI gate: `make fmt vet test` (+ `make test-ws` if streaming assertions).
- Week 3 (M5 focus)
  - Store interface + memory store; save-on-close; join load; reconnect tests.
  - Docs: persistence flags and reconnect notes. CI gate: all tests green.
- Week 4 (Non-Functional polish)
  - Harden metrics, timeouts; `gateway` server timeouts; update backlog/progress; optional `wsprobe` support for `handover`.

Parallelizable streams:
- WS transport work (handover/idle/metrics) can proceed parallel to engine AOI tests.
- Bot density (engine) can proceed in parallel with metrics in WS.
- Persistence (store + join) can start in parallel once M3 stabilizes; WS save-on-close wiring overlaps lightly.

---

**CI Gates & Dev Workflow**

- For every PR:
  - Run `make fmt vet test` and, if touching WS, `make test[2025-09-12T18:44:05] ERROR: stream disconnected before completion: Transport error: error decoding response body
